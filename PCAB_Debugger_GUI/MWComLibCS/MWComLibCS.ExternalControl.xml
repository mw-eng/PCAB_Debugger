<?xml version="1.0"?>
<doc>
    <assembly>
        <name>MWComLibCS.ExternalControl</name>
    </assembly>
    <members>
        <member name="T:MWComLibCS.ExternalControl.FT232R.FT232R_EEPROM_STRUCTURE">
            <summary>
            EEPROM structure specific to FT232R and FT245R devices.
            Inherits from FT_EEPROM_DATA.
            </summary>
        </member>
        <member name="F:MWComLibCS.ExternalControl.FT232R.FT232R_EEPROM_STRUCTURE.UseExtOsc">
            <summary>
            Disables the FT232R internal clock source.  
            If the device has external oscillator enabled it must have an external oscillator fitted to function
            </summary>
        </member>
        <member name="F:MWComLibCS.ExternalControl.FT232R.FT232R_EEPROM_STRUCTURE.HighDriveIOs">
            <summary>
            Enables high current IOs
            </summary>
        </member>
        <member name="F:MWComLibCS.ExternalControl.FT232R.FT232R_EEPROM_STRUCTURE.EndpointSize">
            <summary>
            Sets the endpoint size.  This should always be set to 64
            </summary>
        </member>
        <member name="F:MWComLibCS.ExternalControl.FT232R.FT232R_EEPROM_STRUCTURE.PullDownEnable">
            <summary>
            Determines if IOs are pulled down when the device is in suspend
            </summary>
        </member>
        <member name="F:MWComLibCS.ExternalControl.FT232R.FT232R_EEPROM_STRUCTURE.SerNumEnable">
            <summary>
            Determines if the serial number is enabled
            </summary>
        </member>
        <member name="F:MWComLibCS.ExternalControl.FT232R.FT232R_EEPROM_STRUCTURE.InvertTXD">
            <summary>
            Inverts the sense of the TXD line
            </summary>
        </member>
        <member name="F:MWComLibCS.ExternalControl.FT232R.FT232R_EEPROM_STRUCTURE.InvertRXD">
            <summary>
            Inverts the sense of the RXD line
            </summary>
        </member>
        <member name="F:MWComLibCS.ExternalControl.FT232R.FT232R_EEPROM_STRUCTURE.InvertRTS">
            <summary>
            Inverts the sense of the RTS line
            </summary>
        </member>
        <member name="F:MWComLibCS.ExternalControl.FT232R.FT232R_EEPROM_STRUCTURE.InvertCTS">
            <summary>
            Inverts the sense of the CTS line
            </summary>
        </member>
        <member name="F:MWComLibCS.ExternalControl.FT232R.FT232R_EEPROM_STRUCTURE.InvertDTR">
            <summary>
            Inverts the sense of the DTR line
            </summary>
        </member>
        <member name="F:MWComLibCS.ExternalControl.FT232R.FT232R_EEPROM_STRUCTURE.InvertDSR">
            <summary>
            Inverts the sense of the DSR line
            </summary>
        </member>
        <member name="F:MWComLibCS.ExternalControl.FT232R.FT232R_EEPROM_STRUCTURE.InvertDCD">
            <summary>
            Inverts the sense of the DCD line
            </summary>
        </member>
        <member name="F:MWComLibCS.ExternalControl.FT232R.FT232R_EEPROM_STRUCTURE.InvertRI">
            <summary>
            Inverts the sense of the RI line
            </summary>
        </member>
        <member name="F:MWComLibCS.ExternalControl.FT232R.FT232R_EEPROM_STRUCTURE.Cbus0">
            <summary>
            Sets the function of the CBUS0 pin for FT232R devices.
            Valid values are FT_CBUS_TXDEN, FT_CBUS_PWRON , FT_CBUS_RXLED, FT_CBUS_TXLED, 
            FT_CBUS_TXRXLED, FT_CBUS_SLEEP, FT_CBUS_CLK48, FT_CBUS_CLK24, FT_CBUS_CLK12, 
            FT_CBUS_CLK6, FT_CBUS_IOMODE, FT_CBUS_BITBANG_WR, FT_CBUS_BITBANG_RD
            </summary>
        </member>
        <member name="F:MWComLibCS.ExternalControl.FT232R.FT232R_EEPROM_STRUCTURE.Cbus1">
            <summary>
            Sets the function of the CBUS1 pin for FT232R devices.
            Valid values are FT_CBUS_TXDEN, FT_CBUS_PWRON , FT_CBUS_RXLED, FT_CBUS_TXLED, 
            FT_CBUS_TXRXLED, FT_CBUS_SLEEP, FT_CBUS_CLK48, FT_CBUS_CLK24, FT_CBUS_CLK12, 
            FT_CBUS_CLK6, FT_CBUS_IOMODE, FT_CBUS_BITBANG_WR, FT_CBUS_BITBANG_RD
            </summary>
        </member>
        <member name="F:MWComLibCS.ExternalControl.FT232R.FT232R_EEPROM_STRUCTURE.Cbus2">
            <summary>
            Sets the function of the CBUS2 pin for FT232R devices.
            Valid values are FT_CBUS_TXDEN, FT_CBUS_PWRON , FT_CBUS_RXLED, FT_CBUS_TXLED, 
            FT_CBUS_TXRXLED, FT_CBUS_SLEEP, FT_CBUS_CLK48, FT_CBUS_CLK24, FT_CBUS_CLK12, 
            FT_CBUS_CLK6, FT_CBUS_IOMODE, FT_CBUS_BITBANG_WR, FT_CBUS_BITBANG_RD
            </summary>
        </member>
        <member name="F:MWComLibCS.ExternalControl.FT232R.FT232R_EEPROM_STRUCTURE.Cbus3">
            <summary>
            Sets the function of the CBUS3 pin for FT232R devices.
            Valid values are FT_CBUS_TXDEN, FT_CBUS_PWRON , FT_CBUS_RXLED, FT_CBUS_TXLED, 
            FT_CBUS_TXRXLED, FT_CBUS_SLEEP, FT_CBUS_CLK48, FT_CBUS_CLK24, FT_CBUS_CLK12, 
            FT_CBUS_CLK6, FT_CBUS_IOMODE, FT_CBUS_BITBANG_WR, FT_CBUS_BITBANG_RD
            </summary>
        </member>
        <member name="F:MWComLibCS.ExternalControl.FT232R.FT232R_EEPROM_STRUCTURE.Cbus4">
            <summary>
            Sets the function of the CBUS4 pin for FT232R devices.
            Valid values are FT_CBUS_TXDEN, FT_CBUS_PWRON , FT_CBUS_RXLED, FT_CBUS_TXLED, 
            FT_CBUS_TXRXLED, FT_CBUS_SLEEP, FT_CBUS_CLK48, FT_CBUS_CLK24, FT_CBUS_CLK12, 
            FT_CBUS_CLK6
            </summary>
        </member>
        <member name="F:MWComLibCS.ExternalControl.FT232R.FT232R_EEPROM_STRUCTURE.RIsD2XX">
            <summary>
            Determines if the VCP driver is loaded
            </summary>
        </member>
        <member name="T:MWComLibCS.ExternalControl.FT232H.FT_232H_CBUS_OPTIONS">
            <summary>
            Available functions for the FT232H CBUS pins.  Controlled by FT232H EEPROM settings
            </summary>
        </member>
        <member name="F:MWComLibCS.ExternalControl.FT232H.FT_232H_CBUS_OPTIONS.FT_CBUS_TRISTATE">
            <summary>
            FT232H CBUS EEPROM options - Tristate
            </summary>
        </member>
        <member name="F:MWComLibCS.ExternalControl.FT232H.FT_232H_CBUS_OPTIONS.FT_CBUS_RXLED">
            <summary>
            FT232H CBUS EEPROM options - Rx LED
            </summary>
        </member>
        <member name="F:MWComLibCS.ExternalControl.FT232H.FT_232H_CBUS_OPTIONS.FT_CBUS_TXLED">
            <summary>
            FT232H CBUS EEPROM options - Tx LED
            </summary>
        </member>
        <member name="F:MWComLibCS.ExternalControl.FT232H.FT_232H_CBUS_OPTIONS.FT_CBUS_TXRXLED">
            <summary>
            FT232H CBUS EEPROM options - Tx and Rx LED
            </summary>
        </member>
        <member name="F:MWComLibCS.ExternalControl.FT232H.FT_232H_CBUS_OPTIONS.FT_CBUS_PWREN">
            <summary>
            FT232H CBUS EEPROM options - Power Enable#
            </summary>
        </member>
        <member name="F:MWComLibCS.ExternalControl.FT232H.FT_232H_CBUS_OPTIONS.FT_CBUS_SLEEP">
            <summary>
            FT232H CBUS EEPROM options - Sleep
            </summary>
        </member>
        <member name="F:MWComLibCS.ExternalControl.FT232H.FT_232H_CBUS_OPTIONS.FT_CBUS_DRIVE_0">
            <summary>
            FT232H CBUS EEPROM options - Drive pin to logic 0
            </summary>
        </member>
        <member name="F:MWComLibCS.ExternalControl.FT232H.FT_232H_CBUS_OPTIONS.FT_CBUS_DRIVE_1">
            <summary>
            FT232H CBUS EEPROM options - Drive pin to logic 1
            </summary>
        </member>
        <member name="F:MWComLibCS.ExternalControl.FT232H.FT_232H_CBUS_OPTIONS.FT_CBUS_IOMODE">
            <summary>
            FT232H CBUS EEPROM options - IO Mode
            </summary>
        </member>
        <member name="F:MWComLibCS.ExternalControl.FT232H.FT_232H_CBUS_OPTIONS.FT_CBUS_TXDEN">
            <summary>
            FT232H CBUS EEPROM options - Tx Data Enable
            </summary>
        </member>
        <member name="F:MWComLibCS.ExternalControl.FT232H.FT_232H_CBUS_OPTIONS.FT_CBUS_CLK30">
            <summary>
            FT232H CBUS EEPROM options - 30MHz clock
            </summary>
        </member>
        <member name="F:MWComLibCS.ExternalControl.FT232H.FT_232H_CBUS_OPTIONS.FT_CBUS_CLK15">
            <summary>
            FT232H CBUS EEPROM options - 15MHz clock
            </summary>
        </member>
        <member name="F:MWComLibCS.ExternalControl.FT232H.FT_232H_CBUS_OPTIONS.FT_CBUS_CLK7_5">
            <summary>
            FT232H CBUS EEPROM options - 7.5MHz clock
            </summary>
        </member>
        <member name="T:MWComLibCS.ExternalControl.FT232H.FT232H_EEPROM_STRUCTURE">
            <summary>
            EEPROM structure specific to FT232H devices.
            Inherits from FT_EEPROM_DATA.
            </summary>
        </member>
        <member name="F:MWComLibCS.ExternalControl.FT232H.FT232H_EEPROM_STRUCTURE.PullDownEnable">
            <summary>
            Determines if IOs are pulled down when the device is in suspend
            </summary>
        </member>
        <member name="F:MWComLibCS.ExternalControl.FT232H.FT232H_EEPROM_STRUCTURE.SerNumEnable">
            <summary>
            Determines if the serial number is enabled
            </summary>
        </member>
        <member name="F:MWComLibCS.ExternalControl.FT232H.FT232H_EEPROM_STRUCTURE.ACSlowSlew">
            <summary>
            Determines if AC pins have a slow slew rate
            </summary>
        </member>
        <member name="F:MWComLibCS.ExternalControl.FT232H.FT232H_EEPROM_STRUCTURE.ACSchmittInput">
            <summary>
            Determines if the AC pins have a Schmitt input
            </summary>
        </member>
        <member name="F:MWComLibCS.ExternalControl.FT232H.FT232H_EEPROM_STRUCTURE.ACDriveCurrent">
            <summary>
            Determines the AC pins drive current in mA.  Valid values are FT_DRIVE_CURRENT_4MA, FT_DRIVE_CURRENT_8MA, FT_DRIVE_CURRENT_12MA or FT_DRIVE_CURRENT_16MA
            </summary>
        </member>
        <member name="F:MWComLibCS.ExternalControl.FT232H.FT232H_EEPROM_STRUCTURE.ADSlowSlew">
            <summary>
            Determines if AD pins have a slow slew rate
            </summary>
        </member>
        <member name="F:MWComLibCS.ExternalControl.FT232H.FT232H_EEPROM_STRUCTURE.ADSchmittInput">
            <summary>
            Determines if the AD pins have a Schmitt input
            </summary>
        </member>
        <member name="F:MWComLibCS.ExternalControl.FT232H.FT232H_EEPROM_STRUCTURE.ADDriveCurrent">
            <summary>
            Determines the AD pins drive current in mA.  Valid values are FT_DRIVE_CURRENT_4MA, FT_DRIVE_CURRENT_8MA, FT_DRIVE_CURRENT_12MA or FT_DRIVE_CURRENT_16MA
            </summary>
        </member>
        <member name="F:MWComLibCS.ExternalControl.FT232H.FT232H_EEPROM_STRUCTURE.Cbus0">
            <summary>
            Sets the function of the CBUS0 pin for FT232H devices.
            Valid values are FT_CBUS_TRISTATE, FT_CBUS_RXLED, FT_CBUS_TXLED, FT_CBUS_TXRXLED,
            FT_CBUS_PWREN, FT_CBUS_SLEEP, FT_CBUS_DRIVE_0, FT_CBUS_DRIVE_1, FT_CBUS_TXDEN, FT_CBUS_CLK30,
            FT_CBUS_CLK15, FT_CBUS_CLK7_5
            </summary>
        </member>
        <member name="F:MWComLibCS.ExternalControl.FT232H.FT232H_EEPROM_STRUCTURE.Cbus1">
            <summary>
            Sets the function of the CBUS1 pin for FT232H devices.
            Valid values are FT_CBUS_TRISTATE, FT_CBUS_RXLED, FT_CBUS_TXLED, FT_CBUS_TXRXLED,
            FT_CBUS_PWREN, FT_CBUS_SLEEP, FT_CBUS_DRIVE_0, FT_CBUS_DRIVE_1, FT_CBUS_TXDEN, FT_CBUS_CLK30,
            FT_CBUS_CLK15, FT_CBUS_CLK7_5
            </summary>
        </member>
        <member name="F:MWComLibCS.ExternalControl.FT232H.FT232H_EEPROM_STRUCTURE.Cbus2">
            <summary>
            Sets the function of the CBUS2 pin for FT232H devices.
            Valid values are FT_CBUS_TRISTATE, FT_CBUS_RXLED, FT_CBUS_TXLED, FT_CBUS_TXRXLED,
            FT_CBUS_PWREN, FT_CBUS_SLEEP, FT_CBUS_DRIVE_0, FT_CBUS_DRIVE_1, FT_CBUS_TXDEN
            </summary>
        </member>
        <member name="F:MWComLibCS.ExternalControl.FT232H.FT232H_EEPROM_STRUCTURE.Cbus3">
            <summary>
            Sets the function of the CBUS3 pin for FT232H devices.
            Valid values are FT_CBUS_TRISTATE, FT_CBUS_RXLED, FT_CBUS_TXLED, FT_CBUS_TXRXLED,
            FT_CBUS_PWREN, FT_CBUS_SLEEP, FT_CBUS_DRIVE_0, FT_CBUS_DRIVE_1, FT_CBUS_TXDEN
            </summary>
        </member>
        <member name="F:MWComLibCS.ExternalControl.FT232H.FT232H_EEPROM_STRUCTURE.Cbus4">
            <summary>
            Sets the function of the CBUS4 pin for FT232H devices.
            Valid values are FT_CBUS_TRISTATE, FT_CBUS_RXLED, FT_CBUS_TXLED, FT_CBUS_TXRXLED,
            FT_CBUS_PWREN, FT_CBUS_SLEEP, FT_CBUS_DRIVE_0, FT_CBUS_DRIVE_1, FT_CBUS_TXDEN
            </summary>
        </member>
        <member name="F:MWComLibCS.ExternalControl.FT232H.FT232H_EEPROM_STRUCTURE.Cbus5">
            <summary>
            Sets the function of the CBUS5 pin for FT232H devices.
            Valid values are FT_CBUS_TRISTATE, FT_CBUS_RXLED, FT_CBUS_TXLED, FT_CBUS_TXRXLED,
            FT_CBUS_PWREN, FT_CBUS_SLEEP, FT_CBUS_DRIVE_0, FT_CBUS_DRIVE_1, FT_CBUS_IOMODE,
            FT_CBUS_TXDEN, FT_CBUS_CLK30, FT_CBUS_CLK15, FT_CBUS_CLK7_5
            </summary>
        </member>
        <member name="F:MWComLibCS.ExternalControl.FT232H.FT232H_EEPROM_STRUCTURE.Cbus6">
            <summary>
            Sets the function of the CBUS6 pin for FT232H devices.
            Valid values are FT_CBUS_TRISTATE, FT_CBUS_RXLED, FT_CBUS_TXLED, FT_CBUS_TXRXLED,
            FT_CBUS_PWREN, FT_CBUS_SLEEP, FT_CBUS_DRIVE_0, FT_CBUS_DRIVE_1, FT_CBUS_IOMODE,
            FT_CBUS_TXDEN, FT_CBUS_CLK30, FT_CBUS_CLK15, FT_CBUS_CLK7_5
            </summary>
        </member>
        <member name="F:MWComLibCS.ExternalControl.FT232H.FT232H_EEPROM_STRUCTURE.Cbus7">
            <summary>
            Sets the function of the CBUS7 pin for FT232H devices.
            Valid values are FT_CBUS_TRISTATE
            </summary>
        </member>
        <member name="F:MWComLibCS.ExternalControl.FT232H.FT232H_EEPROM_STRUCTURE.Cbus8">
            <summary>
            Sets the function of the CBUS8 pin for FT232H devices.
            Valid values are FT_CBUS_TRISTATE, FT_CBUS_RXLED, FT_CBUS_TXLED, FT_CBUS_TXRXLED,
            FT_CBUS_PWREN, FT_CBUS_SLEEP, FT_CBUS_DRIVE_0, FT_CBUS_DRIVE_1, FT_CBUS_IOMODE,
            FT_CBUS_TXDEN, FT_CBUS_CLK30, FT_CBUS_CLK15, FT_CBUS_CLK7_5
            </summary>
        </member>
        <member name="F:MWComLibCS.ExternalControl.FT232H.FT232H_EEPROM_STRUCTURE.Cbus9">
            <summary>
            Sets the function of the CBUS9 pin for FT232H devices.
            Valid values are FT_CBUS_TRISTATE, FT_CBUS_RXLED, FT_CBUS_TXLED, FT_CBUS_TXRXLED,
            FT_CBUS_PWREN, FT_CBUS_SLEEP, FT_CBUS_DRIVE_0, FT_CBUS_DRIVE_1, FT_CBUS_IOMODE,
            FT_CBUS_TXDEN, FT_CBUS_CLK30, FT_CBUS_CLK15, FT_CBUS_CLK7_5
            </summary>
        </member>
        <member name="F:MWComLibCS.ExternalControl.FT232H.FT232H_EEPROM_STRUCTURE.IsFifo">
            <summary>
            Determines if the device is in FIFO mode
            </summary>
        </member>
        <member name="F:MWComLibCS.ExternalControl.FT232H.FT232H_EEPROM_STRUCTURE.IsFifoTar">
            <summary>
            Determines if the device is in FIFO target mode
            </summary>
        </member>
        <member name="F:MWComLibCS.ExternalControl.FT232H.FT232H_EEPROM_STRUCTURE.IsFastSer">
            <summary>
            Determines if the device is in fast serial mode
            </summary>
        </member>
        <member name="F:MWComLibCS.ExternalControl.FT232H.FT232H_EEPROM_STRUCTURE.IsFT1248">
            <summary>
            Determines if the device is in FT1248 mode
            </summary>
        </member>
        <member name="F:MWComLibCS.ExternalControl.FT232H.FT232H_EEPROM_STRUCTURE.FT1248Cpol">
            <summary>
            Determines FT1248 mode clock polarity
            </summary>
        </member>
        <member name="F:MWComLibCS.ExternalControl.FT232H.FT232H_EEPROM_STRUCTURE.FT1248Lsb">
            <summary>
            Determines if data is ent MSB (0) or LSB (1) in FT1248 mode
            </summary>
        </member>
        <member name="F:MWComLibCS.ExternalControl.FT232H.FT232H_EEPROM_STRUCTURE.FT1248FlowControl">
            <summary>
            Determines if FT1248 mode uses flow control
            </summary>
        </member>
        <member name="F:MWComLibCS.ExternalControl.FT232H.FT232H_EEPROM_STRUCTURE.IsVCP">
            <summary>
            Determines if the VCP driver is loaded
            </summary>
        </member>
        <member name="F:MWComLibCS.ExternalControl.FT232H.FT232H_EEPROM_STRUCTURE.PowerSaveEnable">
            <summary>
            For self-powered designs, keeps the FT232H in low power state until ACBUS7 is high
            </summary>
        </member>
        <member name="T:MWComLibCS.ExternalControl.FTD2xx">
            <summary>FTDI派生クラス(FT2xx簡易制御用)<br/>
            動作検証済み(FT232R/FT232H)</summary>
        </member>
        <member name="M:MWComLibCS.ExternalControl.FTD2xx.#ctor">
            <summary>コンストラクタ</summary>
        </member>
        <member name="M:MWComLibCS.ExternalControl.FTD2xx.Finalize">
            <summary>デストラクタ</summary>
        </member>
        <member name="M:MWComLibCS.ExternalControl.FTD2xx.GetNumberOfDevices(MWComLibCS.ExternalControl.FTDI.FT_STATUS@)">
            <summary>利用可能なFTDIデバイス数を取得</summary>
            <param name="STATUS">out FT_STATUS</param>
        </member>
        <member name="M:MWComLibCS.ExternalControl.FTD2xx.GetFTD2xxDeviceList(MWComLibCS.ExternalControl.FTDI.FT_STATUS@)">
            <summary>利用可能な全FTDIデバイスに関する情報を取得(FTD2xx型)</summary>
            <param name="STATUS">out FT_STATUS</param>
            <returns></returns>
        </member>
        <member name="M:MWComLibCS.ExternalControl.FTD2xx.GetDeviceList(MWComLibCS.ExternalControl.FTDI.FT_STATUS@)">
            <summary>利用可能な全FTDIデバイスに関する情報を取得</summary>
            <param name="STATUS">out FT_STATUS</param>
        </member>
        <member name="M:MWComLibCS.ExternalControl.FTD2xx.ConvertDeviceList(MWComLibCS.ExternalControl.FTDI.FT_DEVICE_INFO_NODE[])">
            <summary>FT_DEVICE_INFO_NODE配列をFTD2xx_DEVICE_INFO_NODE配列に変換</summary>
            <param name="DeviceLists">変換元デバイスリスト</param>
            <returns>FT_STATUS</returns>
        </member>
        <member name="T:MWComLibCS.ExternalControl.FTD2xx.FTD2xx_DEVICE_INFO_NODE">
            <summary>FT_DEVICE_INFO_NODE継承クラス(SerialNumber to Binary)</summary>
        </member>
        <member name="F:MWComLibCS.ExternalControl.FTD2xx.FTD2xx_DEVICE_INFO_NODE.SerialNumber">
            <summary>
            The device serial number binary
            </summary>
        </member>
        <member name="M:MWComLibCS.ExternalControl.FTD2xx.FTD2xx_DEVICE_INFO_NODE.#ctor(MWComLibCS.ExternalControl.FTDI.FT_DEVICE_INFO_NODE)">
            <summary>コンストラクタ</summary>
            <param name="DEVICE_INFO">FT_DEVICE_INFO_NODEの変換元</param>
        </member>
        <member name="T:MWComLibCS.ExternalControl.FTD2xx.IO_STATUS">
            <summary>IO設定</summary>
        </member>
        <member name="F:MWComLibCS.ExternalControl.FTD2xx.IO_STATUS.Mask">
            <summary>IO Mask取得(0:Rx, 1:Tx)</summary>
        </member>
        <member name="P:MWComLibCS.ExternalControl.FTD2xx.IO_STATUS.IO0">
            <summary>IO0の入出力設定状態(true:Tx, False:Rx)</summary>
        </member>
        <member name="P:MWComLibCS.ExternalControl.FTD2xx.IO_STATUS.IO1">
            <summary>IO1の入出力設定状態(true:Tx, False:Rx)</summary>
        </member>
        <member name="P:MWComLibCS.ExternalControl.FTD2xx.IO_STATUS.IO2">
            <summary>IO2の入出力設定状態(true:Tx, False:Rx)</summary>
        </member>
        <member name="P:MWComLibCS.ExternalControl.FTD2xx.IO_STATUS.IO3">
            <summary>IO3の入出力設定状態(true:Tx, False:Rx)</summary>
        </member>
        <member name="P:MWComLibCS.ExternalControl.FTD2xx.IO_STATUS.IO4">
            <summary>IO4の入出力設定状態(true:Tx, False:Rx)</summary>
        </member>
        <member name="P:MWComLibCS.ExternalControl.FTD2xx.IO_STATUS.IO5">
            <summary>IO5の入出力設定状態(true:Tx, False:Rx)</summary>
        </member>
        <member name="P:MWComLibCS.ExternalControl.FTD2xx.IO_STATUS.IO6">
            <summary>IO6の入出力設定状態(true:Tx, False:Rx)</summary>
        </member>
        <member name="P:MWComLibCS.ExternalControl.FTD2xx.IO_STATUS.IO7">
            <summary>IO7の入出力設定状態(true:Tx, False:Rx)</summary>
        </member>
        <member name="M:MWComLibCS.ExternalControl.FTD2xx.IO_STATUS.#ctor(System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>コンストラクタ</summary>
            <param name="io0">LSB(true:Tx, False:Rx)</param>
            <param name="io1"></param>
            <param name="io2"></param>
            <param name="io3"></param>
            <param name="io4"></param>
            <param name="io5"></param>
            <param name="io6"></param>
            <param name="io7">MSB(true:Tx, False:Rx)</param>
        </member>
        <member name="M:MWComLibCS.ExternalControl.FTD2xx.IO_STATUS.#ctor(MWComLibCS.ExternalControl.FTD2xx.IO,MWComLibCS.ExternalControl.FTD2xx.IO,MWComLibCS.ExternalControl.FTD2xx.IO,MWComLibCS.ExternalControl.FTD2xx.IO,MWComLibCS.ExternalControl.FTD2xx.IO,MWComLibCS.ExternalControl.FTD2xx.IO,MWComLibCS.ExternalControl.FTD2xx.IO,MWComLibCS.ExternalControl.FTD2xx.IO)">
            <summary>コンストラクタ</summary>
            <param name="io0">LSB</param>
            <param name="io1"></param>
            <param name="io2"></param>
            <param name="io3"></param>
            <param name="io4"></param>
            <param name="io5"></param>
            <param name="io6"></param>
            <param name="io7">MSB</param>
        </member>
        <member name="M:MWComLibCS.ExternalControl.FTD2xx.IO_STATUS.GetIO(System.UInt16)">
            <summary>IOの入出力設定状態取得</summary>
            <param name="No">取得IO番号(0 to 7)</param>
            <returns>true:Tx, False:Rx</returns>
        </member>
        <member name="M:MWComLibCS.ExternalControl.FTD2xx.IO_STATUS.SetIO(System.UInt16,MWComLibCS.ExternalControl.FTD2xx.IO)">
            <summary>IOの入出力設定変更</summary>
            <param name="No">変更IO番号(0 to 7)</param>
            <param name="io">IN/OUT</param>
            <returns>変更成否</returns>
        </member>
        <member name="T:MWComLibCS.ExternalControl.FTD2xx.IO">
            <summary>IO状態</summary>
        </member>
        <member name="M:MWComLibCS.ExternalControl.FTD2xx.Open(System.Byte[])">
            <summary>シリアル番号でデバイスをオープン</summary>
            <param name="SerialNumber">シリアル番号のバイナリ</param>
        </member>
        <member name="M:MWComLibCS.ExternalControl.FTD2xx.Open(System.UInt32)">
            <summary>ロケーションIDでデバイスをオープン</summary>
            <param name="Location">ロケーションID</param>
        </member>
        <member name="M:MWComLibCS.ExternalControl.FTD2xx.Open(System.String)">
            <summary>Description文字列でデバイスをオープン</summary>
            <param name="Description">Description文字列</param>
        </member>
        <member name="M:MWComLibCS.ExternalControl.FTD2xx.GetDeviceType(MWComLibCS.ExternalControl.FTDI.FT_STATUS@)">
            <summary>Deviceタイプ取得</summary>
            <returns>デバイスタイプ</returns>
        </member>
        <member name="M:MWComLibCS.ExternalControl.FTD2xx.Write(System.Byte[])">
            <summary>デバイスにデータを書込み</summary>
            <param name="DAT">データ</param>
        </member>
        <member name="M:MWComLibCS.ExternalControl.FTD2xx.Write(System.String)">
            <summary>デバイスに文字列を書込み</summary>
            <param name="AsciiDAT">ASCII文字列</param>
        </member>
        <member name="M:MWComLibCS.ExternalControl.FTD2xx.WriteLine(System.String)">
            <summary>デバイスに文字列を書込み(UART_DeviceSettings時に指定した配列を自動追加)</summary>
            <param name="AsciiDAT">ASCII文字列</param>
        </member>
        <member name="M:MWComLibCS.ExternalControl.FTD2xx.WriteLine(System.Byte[])">
            <summary>デバイスにデータを書込み(UART_DeviceSettings時に指定した配列を自動追加)</summary>
            <param name="DAT">データ</param>
            <returns></returns>
        </member>
        <member name="M:MWComLibCS.ExternalControl.FTD2xx.ReadAscii(MWComLibCS.ExternalControl.FTDI.FT_STATUS@)">
            <summary>受信バッファ内のデータを(ASCII)文字列として全取得</summary>
            <param name="STATUS"></param>
            <returns></returns>
        </member>
        <member name="M:MWComLibCS.ExternalControl.FTD2xx.Read(MWComLibCS.ExternalControl.FTDI.FT_STATUS@)">
            <summary>受信バッファ内のデータを全取得</summary>
            <param name="STATUS"></param>
            <returns></returns>
        </member>
        <member name="M:MWComLibCS.ExternalControl.FTD2xx.PurgeRX">
            <summary>受信バッファクリア</summary>
        </member>
        <member name="M:MWComLibCS.ExternalControl.FTD2xx.PurgeTX">
            <summary>送信バッファクリア</summary>
        </member>
        <member name="M:MWComLibCS.ExternalControl.FTD2xx.UART_DeviceSettings">
            <summary>UARTをデフォルトで設定<br/>
            改行コード(\r)/ボーレート(9600bps)／ワード長(8bit)／ストップビット(1bit)／パリティ(None)／Flow制御None／タイムアウト5秒</summary>
            <returns></returns>
        </member>
        <member name="M:MWComLibCS.ExternalControl.FTD2xx.UART_DeviceSettings(System.Byte[])">
            <summary>UARTをデフォルトで設定<br/>
            ボーレート(9600bps)／ワード長(8bit)／ストップビット(1bit)／パリティ(None)／Flow制御None／タイムアウト5秒</summary>
            <param name="NewLine">改行コード</param>
        </member>
        <member name="M:MWComLibCS.ExternalControl.FTD2xx.UART_DeviceSettings(System.Byte[],System.UInt32)">
            <summary>UARTのボーレートをデフォルトで設定<br/>
            ワード長(8bit)／ストップビット(1bit)／パリティ(None)／Flow制御None／タイムアウト5秒</summary>
            <param name="BaudRate">ボーレートの設定値</param>
        </member>
        <member name="M:MWComLibCS.ExternalControl.FTD2xx.UART_DeviceSettings(System.Byte[],System.UInt32,System.UInt32)">
            <summary>UARTのボーレートとタイムアウト時間以外をデフォルトで設定<br/>
            ワード長(8bit)／ストップビット(1bit)／パリティ(None)／Flow制御None</summary>
            <param name="NewLine">改行コード</param>
            <param name="BaudRate">ボーレートの設定値</param>
            <param name="Timeout">送受信タイムアウト時間[mS](0:タイムアウト無)</param>
        </member>
        <member name="M:MWComLibCS.ExternalControl.FTD2xx.UART_DeviceSettings(System.Byte[],System.UInt32,System.UInt32,System.UInt32)">
            <summary>UARTのボーレートとタイムアウト時間以外をデフォルトで設定<br/>
            ワード長(8bit)／ストップビット(1bit)／パリティ(None)／Flow制御None</summary>
            <param name="NewLine">改行コード</param>
            <param name="BaudRate">ボーレートの設定値</param>
            <param name="ReadTimeout">受信タイムアウト時間[mS](0:タイムアウト無)</param>
            <param name="WriteTimeout">送信タイムアウト時間[mS](0:タイムアウト無)</param>
        </member>
        <member name="M:MWComLibCS.ExternalControl.FTD2xx.UART_Enable">
            <summary>UARTモードに設定</summary>
            <returns></returns>
        </member>
        <member name="M:MWComLibCS.ExternalControl.FTD2xx.UART_BufferClear">
            <summary>UART受信バッファのクリア</summary>
        </member>
        <member name="P:MWComLibCS.ExternalControl.FTD2xx.UART_Buffer">
            <summary>UART受信バッファの取得</summary>
        </member>
        <member name="M:MWComLibCS.ExternalControl.FTD2xx.UART_ReadLine(MWComLibCS.ExternalControl.FTDI.FT_STATUS@)">
            <summary>UART 改行コードまでを受信</summary>
            <param name="STATUS"></param>
            <returns></returns>
        </member>
        <member name="M:MWComLibCS.ExternalControl.FTD2xx.UART_SetFlowControl">
            <summary>フロー制御をDefault (None)に設定</summary>
        </member>
        <member name="M:MWComLibCS.ExternalControl.FTD2xx.UART_SetFlowControl_NONE">
            <summary>フロー制御をNoneに設定</summary>
        </member>
        <member name="M:MWComLibCS.ExternalControl.FTD2xx.UART_SetFlowControl_RTS_CTS">
            <summary>フロー制御をRTS/CSTに設定</summary>
        </member>
        <member name="M:MWComLibCS.ExternalControl.FTD2xx.UART_SetFlowControl_DTR_DSR">
            <summary>フロー制御をDTR/DSRに設定</summary>
        </member>
        <member name="M:MWComLibCS.ExternalControl.FTD2xx.UART_SetFlowControl_XON_XOFF(System.Byte,System.Byte)">
            <summary>フロー制御をXON/XOFFに設定</summary>
            <param name="Xon">Xon 文字</param>
            <param name="Xoff">Xoff 文字</param>
        </member>
        <member name="M:MWComLibCS.ExternalControl.FTD2xx.UART_SetFlowControl(System.UInt16)">
            <summary>フロー制御設定(XON/XOFF以外用)</summary>
        </member>
        <member name="M:MWComLibCS.ExternalControl.FTD2xx.SetDataCharacteristics">
            <summary>キャラクターをDefalt[ワード長(8bit)ストップビット(1bit)パリティ(None)]に設定</summary>
        </member>
        <member name="M:MWComLibCS.ExternalControl.FTD2xx.UART_ReadTaskStart">
            <summary>UART非同期受信タスク開始</summary>
        </member>
        <member name="M:MWComLibCS.ExternalControl.FTD2xx.UART_ReadTask">
            <summary>UART非同期受信タスク</summary>
        </member>
        <member name="P:MWComLibCS.ExternalControl.FTD2xx.UART_ReadTaskIsRUN">
            <summary>UART非同期受信タスクが実行中の場合True</summary>
        </member>
        <member name="M:MWComLibCS.ExternalControl.FTD2xx.SetBitBangMode(System.Boolean,MWComLibCS.ExternalControl.FTD2xx.IO_STATUS)">
            <summary>BitBangMode設定(同期型,通信レート9600,レイテンシ16)</summary>
            <param name="enable">true:有効化, false:無効化</param>
            <param name="io">IO設定</param>
            <returns></returns>
        </member>
        <member name="M:MWComLibCS.ExternalControl.FTD2xx.SetBitBangMode(System.Boolean,MWComLibCS.ExternalControl.FTD2xx.IO_STATUS,System.Boolean)">
            <summary>BitBangMode設定(通信レート9600,レイテンシ16)</summary>
            <param name="enable">true:有効化, false:無効化</param>
            <param name="io">IO設定</param>
            <param name="Sync">true:同期型, false:非同期</param>
            <returns></returns>
        </member>
        <member name="M:MWComLibCS.ExternalControl.FTD2xx.SetBitBangMode(System.Boolean,MWComLibCS.ExternalControl.FTD2xx.IO_STATUS,System.Boolean,System.UInt32,System.Byte)">
            <summary>BitBangMode設定</summary>
            <param name="enable">true:有効化, false:無効化</param>
            <param name="io">IO設定</param>
            <param name="Sync">true:同期型, false:非同期</param>
            <param name="BaudRate">通信レート(x16[Hz])</param>
            <param name="Latency">レイテンシ[mS](2以上推奨)</param>
            <returns></returns>
        </member>
        <member name="P:MWComLibCS.ExternalControl.FTD2xx.GetBusIO">
            <summary>現在のBitBung時 IO設定取得</summary>
        </member>
        <member name="M:MWComLibCS.ExternalControl.FTD2xx.GetPinStates(MWComLibCS.ExternalControl.FTDI.FT_STATUS@)">
            <summary>IOピン状態の取得</summary>
            <param name="STATUS"></param>
            <returns></returns>
        </member>
        <member name="M:MWComLibCS.ExternalControl.FTD2xx.BitBang_ReadWrite(System.Byte,MWComLibCS.ExternalControl.FTDI.FT_STATUS@)">
            <summary>同期型BitBangModeのデータ送受信<br />
            初期bit削除およびPinStatesで取得</summary>
            <param name="WriteDAT">Outputデータ</param>
            <param name="STATUS"></param>
            <returns>ReadDAT</returns>
        </member>
        <member name="M:MWComLibCS.ExternalControl.FTD2xx.BitBang_ReadWrite(System.Byte,System.UInt16,System.UInt32,MWComLibCS.ExternalControl.FTDI.FT_STATUS@)">
            <summary>同期型BitBangModeのデータ送受信<br />
            初期bit削除およびPinStatesで取得</summary>
            <param name="WriteDAT">Outputデータ</param>
            <param name="SleepTime">受信待ち時間[mS]</param>
            <param name="Timeout">Loop Timeout時間[mS]</param>
            <param name="STATUS"></param>
            <returns>ReadDAT</returns>
        </member>
        <member name="M:MWComLibCS.ExternalControl.FTD2xx.BitBang_ReadWrite(System.Byte[],MWComLibCS.ExternalControl.FTDI.FT_STATUS@)">
            <summary>同期型BitBangModeのデータ送受信<br />
            初期bit削除およびPinStatesで取得</summary>
            <param name="WriteDAT">Outputデータ</param>
            <param name="STATUS"></param>
            <returns>ReadDAT</returns>
        </member>
        <member name="M:MWComLibCS.ExternalControl.FTD2xx.BitBang_ReadWrite(System.Byte[],System.UInt16,System.UInt32,MWComLibCS.ExternalControl.FTDI.FT_STATUS@)">
            <summary>同期型BitBangModeのデータ送受信<br />
            初期bit削除およびPinStatesで取得</summary>
            <param name="WriteDAT">Outputデータ</param>
            <param name="SleepTime">受信待ち時間[mS]</param>
            <param name="Timeout">Loop Timeout時間[mS]</param>
            <param name="STATUS"></param>
            <returns>ReadDAT</returns>
        </member>
        <member name="M:MWComLibCS.ExternalControl.FTD2xx.SPI_DeviceSettings">
            <summary>Software SPI通信の初期設定(MSB, Mode0, Clock1[MHz], レイテンシ16[mS])<br />
            ピン設定<br />
            IO0 -> SCK<br />
            IO1 -> MOSI<br />
            IO2 -> MISO<br />
            IO3 -> CS<br />
            IO4 -> RST<br />
            IO5 -> IsMSB<br />
            IO6 -> CPOL<br />
            IO7 -> CPHA<br />
            </summary>
            <returns></returns>
        </member>
        <member name="M:MWComLibCS.ExternalControl.FTD2xx.SPI_DeviceSettings(System.Boolean)">
            <summary>Software SPI通信の初期設定(Mode0, Clock1[MHz], レイテンシ16[mS])<br />
            ピン設定<br />
            IO0 -> SCK<br />
            IO1 -> MOSI<br />
            IO2 -> MISO<br />
            IO3 -> CS<br />
            IO4 -> RST<br />
            IO5 -> IsMSB<br />
            IO6 -> CPOL<br />
            IO7 -> CPHA<br />
            </summary>
            <param name="IsMSB">true:MSB ,false:LSB</param>
            <returns></returns>
        </member>
        <member name="M:MWComLibCS.ExternalControl.FTD2xx.SPI_DeviceSettings(System.Boolean,System.Boolean,System.Boolean)">
            <summary>Software SPI通信の初期設定(Clock1[MHz], レイテンシ16[mS])<br />
            ピン設定<br />
            IO0 -> SCK<br />
            IO1 -> MOSI<br />
            IO2 -> MISO<br />
            IO3 -> CS<br />
            IO4 -> RST<br />
            IO5 -> IsMSB<br />
            IO6 -> CPOL<br />
            IO7 -> CPHA<br />
            </summary>
            <param name="IsMSB">true:MSB ,false:LSB</param>
            <param name="CPOL">非通信時のSCLK状態(true:H, false:L)</param>
            <param name="CPHA">読込タイミング(true:立上り, false:立下り)</param>
            <returns></returns>
        </member>
        <member name="M:MWComLibCS.ExternalControl.FTD2xx.SPI_DeviceSettings(System.Boolean,System.Boolean,System.Boolean,System.UInt16)">
            <summary>Software SPI通信の初期設定(レイテンシ16[mS])<br />
            ピン設定<br />
            IO0 -> SCK<br />
            IO1 -> MOSI<br />
            IO2 -> MISO<br />
            IO3 -> CS<br />
            IO4 -> RST<br />
            IO5 -> IsMSB<br />
            IO6 -> CPOL<br />
            IO7 -> CPHA<br />
            </summary>
            <param name="IsMSB">true:MSB ,false:LSB</param>
            <param name="CPOL">非通信時のSCLK状態(true:H, false:L)</param>
            <param name="CPHA">読込タイミング(true:立上り, false:立下り)</param>
            <returns></returns>
        </member>
        <member name="M:MWComLibCS.ExternalControl.FTD2xx.SPI_DeviceSettings(System.Boolean,System.Boolean,System.Boolean,System.UInt16,System.Byte)">
            <summary>Software SPI通信の初期設定<br />
            ピン設定<br />
            IO0 -> SCK<br />
            IO1 -> MOSI<br />
            IO2 -> MISO<br />
            IO3 -> CS<br />
            IO4 -> RST<br />
            IO5 -> IsMSB<br />
            IO6 -> CPOL<br />
            IO7 -> CPHA<br />
            </summary>
            <param name="IsMSB">true:MSB ,false:LSB</param>
            <param name="CPOL">非通信時のSCLK状態(true:H, false:L)</param>
            <param name="CPHA">読込タイミング(true:立上り, false:立下り)</param>
            <param name="ClockRate">クロック速度[kHz](BaudRate = Freq / 8)</param>
            <param name="Latency">レイテンシ[mS](2以上推奨)</param>
            <returns></returns>
        </member>
        <member name="M:MWComLibCS.ExternalControl.FTD2xx.SPI_WriteCS(System.Boolean)">
            <summary>CS状態設定</summary>
            <param name="CS">true:有効化(LOW), false:無効化(HIGH)</param>
            <returns></returns>
        </member>
        <member name="M:MWComLibCS.ExternalControl.FTD2xx.SPI_WriteRST(System.Boolean)">
            <summary>CS状態設定</summary>
            <param name="RST">true:リセット状態(LOW), false:通常状態(HIGH)</param>
            <returns></returns>
        </member>
        <member name="M:MWComLibCS.ExternalControl.FTD2xx.SPI_ReadWrite(System.Byte[],MWComLibCS.ExternalControl.FTDI.FT_STATUS@)">
            <summary>SPIモードで送受信(受信Timeout 5[S]</summary>
            <param name="WriteDAT">送信データ</param>
            <param name="STATUS"></param>
            <returns></returns>
        </member>
        <member name="M:MWComLibCS.ExternalControl.FTD2xx.SPI_ReadWrite(System.Byte[],System.UInt32,MWComLibCS.ExternalControl.FTDI.FT_STATUS@)">
            <summary>SPIモードで送受信</summary>
            <param name="WriteDAT">送信データ</param>
            <param name="Timeout">送受信タイムアウト時間[mS]</param>
            <param name="STATUS"></param>
            <returns></returns>
        </member>
        <member name="M:MWComLibCS.ExternalControl.FTD2xx.SPI_ReadWrite(System.Boolean[],MWComLibCS.ExternalControl.FTDI.FT_STATUS@)">
            <summary>SPIモードで送受信(受信Timeout 5[S]</summary>
            <param name="WriteDAT">送信データ</param>
            <param name="STATUS"></param>
            <returns></returns>
        </member>
        <member name="M:MWComLibCS.ExternalControl.FTD2xx.SPI_ReadWrite(System.Boolean[],System.UInt32,MWComLibCS.ExternalControl.FTDI.FT_STATUS@)">
            <summary>SPIモードで送受信</summary>
            <param name="WriteDAT">送信データ</param>
            <param name="Timeout">送受信タイムアウト時間[mS]</param>
            <param name="STATUS"></param>
            <returns></returns>
        </member>
        <member name="M:MWComLibCS.ExternalControl.FTD2xx.ConvertBitsArray(System.Byte[])">
            <summary>byte型をbit配列に変換</summary>
            <param name="WriteDAT">bool配列</param>
            <returns></returns>
        </member>
        <member name="M:MWComLibCS.ExternalControl.FTD2xx.ConvertBitsArray(System.Boolean[])">
            <summary>bit配列をbyte型に変換</summary>
            <param name="DAT"></param>
            <returns></returns>
        </member>
        <member name="M:MWComLibCS.ExternalControl.FTD2xx.SPI_WriteArray(System.Boolean[],System.Byte)">
            <summary>bool配列から送信(SPI信号)を生成</summary>
            <param name="WriteDAT">bool配列</param>
            <param name="now">現在のIO状態</param>
            <returns></returns>
        </member>
        <member name="M:MWComLibCS.ExternalControl.FTD2xx.SPI_ReadArray(System.Byte[])">
            <summary>受信(SPI信号)からbool配列を生成</summary>
            <param name="ReadDAT">受信(SPI信号)</param>
            <returns></returns>
        </member>
        <member name="M:MWComLibCS.ExternalControl.FTDI.LoadLibrary(System.String)">
            <summary></summary>
            <param name="dllToLoad"></param>
            <returns></returns>
        </member>
        <member name="M:MWComLibCS.ExternalControl.FTDI.GetProcAddress(System.IntPtr,System.String)">
            <summary></summary>
            <param name="hModule"></param>
            <param name="procedureName"></param>
            <returns></returns>
        </member>
        <member name="M:MWComLibCS.ExternalControl.FTDI.FreeLibrary(System.IntPtr)">
            <summary></summary>
            <param name="hModule"></param>
            <returns></returns>
        </member>
        <member name="M:MWComLibCS.ExternalControl.FTDI.FindFunctionPointers">
            <summary></summary>
        </member>
        <member name="T:MWComLibCS.ExternalControl.FTDI.FT_STATUS">
            <summary>
            Status values for FTDI devices.
            </summary>
        </member>
        <member name="F:MWComLibCS.ExternalControl.FTDI.FT_STATUS.FT_OK">
            <summary>
            Status OK
            </summary>
        </member>
        <member name="F:MWComLibCS.ExternalControl.FTDI.FT_STATUS.FT_INVALID_HANDLE">
            <summary>
            The device handle is invalid
            </summary>
        </member>
        <member name="F:MWComLibCS.ExternalControl.FTDI.FT_STATUS.FT_DEVICE_NOT_FOUND">
            <summary>
            Device not found
            </summary>
        </member>
        <member name="F:MWComLibCS.ExternalControl.FTDI.FT_STATUS.FT_DEVICE_NOT_OPENED">
            <summary>
            Device is not open
            </summary>
        </member>
        <member name="F:MWComLibCS.ExternalControl.FTDI.FT_STATUS.FT_IO_ERROR">
            <summary>
            IO error
            </summary>
        </member>
        <member name="F:MWComLibCS.ExternalControl.FTDI.FT_STATUS.FT_INSUFFICIENT_RESOURCES">
            <summary>
            Insufficient resources
            </summary>
        </member>
        <member name="F:MWComLibCS.ExternalControl.FTDI.FT_STATUS.FT_INVALID_PARAMETER">
            <summary>
            A parameter was invalid
            </summary>
        </member>
        <member name="F:MWComLibCS.ExternalControl.FTDI.FT_STATUS.FT_INVALID_BAUD_RATE">
            <summary>
            The requested baud rate is invalid
            </summary>
        </member>
        <member name="F:MWComLibCS.ExternalControl.FTDI.FT_STATUS.FT_DEVICE_NOT_OPENED_FOR_ERASE">
            <summary>
            Device not opened for erase
            </summary>
        </member>
        <member name="F:MWComLibCS.ExternalControl.FTDI.FT_STATUS.FT_DEVICE_NOT_OPENED_FOR_WRITE">
            <summary>
            Device not poened for write
            </summary>
        </member>
        <member name="F:MWComLibCS.ExternalControl.FTDI.FT_STATUS.FT_FAILED_TO_WRITE_DEVICE">
            <summary>
            Failed to write to device
            </summary>
        </member>
        <member name="F:MWComLibCS.ExternalControl.FTDI.FT_STATUS.FT_EEPROM_READ_FAILED">
            <summary>
            Failed to read the device EEPROM
            </summary>
        </member>
        <member name="F:MWComLibCS.ExternalControl.FTDI.FT_STATUS.FT_EEPROM_WRITE_FAILED">
            <summary>
            Failed to write the device EEPROM
            </summary>
        </member>
        <member name="F:MWComLibCS.ExternalControl.FTDI.FT_STATUS.FT_EEPROM_ERASE_FAILED">
            <summary>
            Failed to erase the device EEPROM
            </summary>
        </member>
        <member name="F:MWComLibCS.ExternalControl.FTDI.FT_STATUS.FT_EEPROM_NOT_PRESENT">
            <summary>
            An EEPROM is not fitted to the device
            </summary>
        </member>
        <member name="F:MWComLibCS.ExternalControl.FTDI.FT_STATUS.FT_EEPROM_NOT_PROGRAMMED">
            <summary>
            Device EEPROM is blank
            </summary>
        </member>
        <member name="F:MWComLibCS.ExternalControl.FTDI.FT_STATUS.FT_INVALID_ARGS">
            <summary>
            Invalid arguments
            </summary>
        </member>
        <member name="F:MWComLibCS.ExternalControl.FTDI.FT_STATUS.FT_OTHER_ERROR">
            <summary>
            An other error has occurred
            </summary>
        </member>
        <member name="T:MWComLibCS.ExternalControl.FTDI.FT_ERROR">
            <summary>
            Error states not supported by FTD2XX DLL.
            </summary>
        </member>
        <member name="T:MWComLibCS.ExternalControl.FTDI.FT_DATA_BITS">
            <summary>
            Permitted data bits for FTDI devices
            </summary>
        </member>
        <member name="F:MWComLibCS.ExternalControl.FTDI.FT_DATA_BITS.FT_BITS_8">
            <summary>
            8 data bits
            </summary>
        </member>
        <member name="F:MWComLibCS.ExternalControl.FTDI.FT_DATA_BITS.FT_BITS_7">
            <summary>
            7 data bits
            </summary>
        </member>
        <member name="T:MWComLibCS.ExternalControl.FTDI.FT_STOP_BITS">
            <summary>
            Permitted stop bits for FTDI devices
            </summary>
        </member>
        <member name="F:MWComLibCS.ExternalControl.FTDI.FT_STOP_BITS.FT_STOP_BITS_1">
            <summary>
            1 stop bit
            </summary>
        </member>
        <member name="F:MWComLibCS.ExternalControl.FTDI.FT_STOP_BITS.FT_STOP_BITS_2">
            <summary>
            2 stop bits
            </summary>
        </member>
        <member name="T:MWComLibCS.ExternalControl.FTDI.FT_PARITY">
            <summary>
            Permitted parity values for FTDI devices
            </summary>
        </member>
        <member name="F:MWComLibCS.ExternalControl.FTDI.FT_PARITY.FT_PARITY_NONE">
            <summary>
            No parity
            </summary>
        </member>
        <member name="F:MWComLibCS.ExternalControl.FTDI.FT_PARITY.FT_PARITY_ODD">
            <summary>
            Odd parity
            </summary>
        </member>
        <member name="F:MWComLibCS.ExternalControl.FTDI.FT_PARITY.FT_PARITY_EVEN">
            <summary>
            Even parity
            </summary>
        </member>
        <member name="F:MWComLibCS.ExternalControl.FTDI.FT_PARITY.FT_PARITY_MARK">
            <summary>
            Mark parity
            </summary>
        </member>
        <member name="F:MWComLibCS.ExternalControl.FTDI.FT_PARITY.FT_PARITY_SPACE">
            <summary>
            Space parity
            </summary>
        </member>
        <member name="T:MWComLibCS.ExternalControl.FTDI.FT_FLOW_CONTROL">
            <summary>
            Permitted flow control values for FTDI devices
            </summary>
        </member>
        <member name="F:MWComLibCS.ExternalControl.FTDI.FT_FLOW_CONTROL.FT_FLOW_NONE">
            <summary>
            No flow control
            </summary>
        </member>
        <member name="F:MWComLibCS.ExternalControl.FTDI.FT_FLOW_CONTROL.FT_FLOW_RTS_CTS">
            <summary>
            RTS/CTS flow control
            </summary>
        </member>
        <member name="F:MWComLibCS.ExternalControl.FTDI.FT_FLOW_CONTROL.FT_FLOW_DTR_DSR">
            <summary>
            DTR/DSR flow control
            </summary>
        </member>
        <member name="F:MWComLibCS.ExternalControl.FTDI.FT_FLOW_CONTROL.FT_FLOW_XON_XOFF">
            <summary>
            Xon/Xoff flow control
            </summary>
        </member>
        <member name="T:MWComLibCS.ExternalControl.FTDI.FT_PURGE">
            <summary>
            Purge buffer constant definitions
            </summary>
        </member>
        <member name="F:MWComLibCS.ExternalControl.FTDI.FT_PURGE.FT_PURGE_RX">
            <summary>
            Purge Rx buffer
            </summary>
        </member>
        <member name="F:MWComLibCS.ExternalControl.FTDI.FT_PURGE.FT_PURGE_TX">
            <summary>
            Purge Tx buffer
            </summary>
        </member>
        <member name="T:MWComLibCS.ExternalControl.FTDI.FT_MODEM_STATUS">
            <summary>
            Modem status bit definitions
            </summary>
        </member>
        <member name="F:MWComLibCS.ExternalControl.FTDI.FT_MODEM_STATUS.FT_CTS">
            <summary>
            Clear To Send (CTS) modem status
            </summary>
        </member>
        <member name="F:MWComLibCS.ExternalControl.FTDI.FT_MODEM_STATUS.FT_DSR">
            <summary>
            Data Set Ready (DSR) modem status
            </summary>
        </member>
        <member name="F:MWComLibCS.ExternalControl.FTDI.FT_MODEM_STATUS.FT_RI">
            <summary>
            Ring Indicator (RI) modem status
            </summary>
        </member>
        <member name="F:MWComLibCS.ExternalControl.FTDI.FT_MODEM_STATUS.FT_DCD">
            <summary>
            Data Carrier Detect (DCD) modem status
            </summary>
        </member>
        <member name="T:MWComLibCS.ExternalControl.FTDI.FT_LINE_STATUS">
            <summary>
            Line status bit definitions
            </summary>
        </member>
        <member name="F:MWComLibCS.ExternalControl.FTDI.FT_LINE_STATUS.FT_OE">
            <summary>
            Overrun Error (OE) line status
            </summary>
        </member>
        <member name="F:MWComLibCS.ExternalControl.FTDI.FT_LINE_STATUS.FT_PE">
            <summary>
            Parity Error (PE) line status
            </summary>
        </member>
        <member name="F:MWComLibCS.ExternalControl.FTDI.FT_LINE_STATUS.FT_FE">
            <summary>
            Framing Error (FE) line status
            </summary>
        </member>
        <member name="F:MWComLibCS.ExternalControl.FTDI.FT_LINE_STATUS.FT_BI">
            <summary>
            Break Interrupt (BI) line status
            </summary>
        </member>
        <member name="T:MWComLibCS.ExternalControl.FTDI.FT_EVENTS">
            <summary>
            FTDI device event types that can be monitored
            </summary>
        </member>
        <member name="F:MWComLibCS.ExternalControl.FTDI.FT_EVENTS.FT_EVENT_RXCHAR">
            <summary>
            Event on receive character
            </summary>
        </member>
        <member name="F:MWComLibCS.ExternalControl.FTDI.FT_EVENTS.FT_EVENT_MODEM_STATUS">
            <summary>
            Event on modem status change
            </summary>
        </member>
        <member name="F:MWComLibCS.ExternalControl.FTDI.FT_EVENTS.FT_EVENT_LINE_STATUS">
            <summary>
            Event on line status change
            </summary>
        </member>
        <member name="T:MWComLibCS.ExternalControl.FTDI.FT_BIT_MODES">
            <summary>
            Permitted bit mode values for FTDI devices.  For use with SetBitMode
            </summary>
        </member>
        <member name="F:MWComLibCS.ExternalControl.FTDI.FT_BIT_MODES.FT_BIT_MODE_RESET">
            <summary>
            Reset bit mode
            </summary>
        </member>
        <member name="F:MWComLibCS.ExternalControl.FTDI.FT_BIT_MODES.FT_BIT_MODE_ASYNC_BITBANG">
            <summary>
            Asynchronous bit-bang mode
            </summary>
        </member>
        <member name="F:MWComLibCS.ExternalControl.FTDI.FT_BIT_MODES.FT_BIT_MODE_MPSSE">
            <summary>
            MPSSE bit mode - only available on FT2232, FT2232H, FT4232H and FT232H
            </summary>
        </member>
        <member name="F:MWComLibCS.ExternalControl.FTDI.FT_BIT_MODES.FT_BIT_MODE_SYNC_BITBANG">
            <summary>
            Synchronous bit-bang mode
            </summary>
        </member>
        <member name="F:MWComLibCS.ExternalControl.FTDI.FT_BIT_MODES.FT_BIT_MODE_MCU_HOST">
            <summary>
            MCU host bus emulation mode - only available on FT2232, FT2232H, FT4232H and FT232H
            </summary>
        </member>
        <member name="F:MWComLibCS.ExternalControl.FTDI.FT_BIT_MODES.FT_BIT_MODE_FAST_SERIAL">
            <summary>
            Fast opto-isolated serial mode - only available on FT2232, FT2232H, FT4232H and FT232H
            </summary>
        </member>
        <member name="F:MWComLibCS.ExternalControl.FTDI.FT_BIT_MODES.FT_BIT_MODE_CBUS_BITBANG">
            <summary>
            CBUS bit-bang mode - only available on FT232R and FT232H
            </summary>
        </member>
        <member name="F:MWComLibCS.ExternalControl.FTDI.FT_BIT_MODES.FT_BIT_MODE_SYNC_FIFO">
            <summary>
            Single channel synchronous 245 FIFO mode - only available on FT2232H channel A and FT232H
            </summary>
        </member>
        <member name="T:MWComLibCS.ExternalControl.FTDI.FT_CBUS_OPTIONS">
            <summary>
            Available functions for the FT232R CBUS pins.  Controlled by FT232R EEPROM settings
            </summary>
        </member>
        <member name="F:MWComLibCS.ExternalControl.FTDI.FT_CBUS_OPTIONS.FT_CBUS_TXDEN">
            <summary>
            FT232R CBUS EEPROM options - Tx Data Enable
            </summary>
        </member>
        <member name="F:MWComLibCS.ExternalControl.FTDI.FT_CBUS_OPTIONS.FT_CBUS_PWRON">
            <summary>
            FT232R CBUS EEPROM options - Power On
            </summary>
        </member>
        <member name="F:MWComLibCS.ExternalControl.FTDI.FT_CBUS_OPTIONS.FT_CBUS_RXLED">
            <summary>
            FT232R CBUS EEPROM options - Rx LED
            </summary>
        </member>
        <member name="F:MWComLibCS.ExternalControl.FTDI.FT_CBUS_OPTIONS.FT_CBUS_TXLED">
            <summary>
            FT232R CBUS EEPROM options - Tx LED
            </summary>
        </member>
        <member name="F:MWComLibCS.ExternalControl.FTDI.FT_CBUS_OPTIONS.FT_CBUS_TXRXLED">
            <summary>
            FT232R CBUS EEPROM options - Tx and Rx LED
            </summary>
        </member>
        <member name="F:MWComLibCS.ExternalControl.FTDI.FT_CBUS_OPTIONS.FT_CBUS_SLEEP">
            <summary>
            FT232R CBUS EEPROM options - Sleep
            </summary>
        </member>
        <member name="F:MWComLibCS.ExternalControl.FTDI.FT_CBUS_OPTIONS.FT_CBUS_CLK48">
            <summary>
            FT232R CBUS EEPROM options - 48MHz clock
            </summary>
        </member>
        <member name="F:MWComLibCS.ExternalControl.FTDI.FT_CBUS_OPTIONS.FT_CBUS_CLK24">
            <summary>
            FT232R CBUS EEPROM options - 24MHz clock
            </summary>
        </member>
        <member name="F:MWComLibCS.ExternalControl.FTDI.FT_CBUS_OPTIONS.FT_CBUS_CLK12">
            <summary>
            FT232R CBUS EEPROM options - 12MHz clock
            </summary>
        </member>
        <member name="F:MWComLibCS.ExternalControl.FTDI.FT_CBUS_OPTIONS.FT_CBUS_CLK6">
            <summary>
            FT232R CBUS EEPROM options - 6MHz clock
            </summary>
        </member>
        <member name="F:MWComLibCS.ExternalControl.FTDI.FT_CBUS_OPTIONS.FT_CBUS_IOMODE">
            <summary>
            FT232R CBUS EEPROM options - IO mode
            </summary>
        </member>
        <member name="F:MWComLibCS.ExternalControl.FTDI.FT_CBUS_OPTIONS.FT_CBUS_BITBANG_WR">
            <summary>
            FT232R CBUS EEPROM options - Bit-bang write strobe
            </summary>
        </member>
        <member name="F:MWComLibCS.ExternalControl.FTDI.FT_CBUS_OPTIONS.FT_CBUS_BITBANG_RD">
            <summary>
            FT232R CBUS EEPROM options - Bit-bang read strobe
            </summary>
        </member>
        <member name="T:MWComLibCS.ExternalControl.FTDI.FT_XSERIES_CBUS_OPTIONS">
            <summary>
            Available functions for the X-Series CBUS pins.  Controlled by X-Series EEPROM settings
            </summary>
        </member>
        <member name="F:MWComLibCS.ExternalControl.FTDI.FT_XSERIES_CBUS_OPTIONS.FT_CBUS_TRISTATE">
            <summary>
            FT X-Series CBUS EEPROM options - Tristate
            </summary>
        </member>
        <member name="F:MWComLibCS.ExternalControl.FTDI.FT_XSERIES_CBUS_OPTIONS.FT_CBUS_RXLED">
            <summary>
            FT X-Series CBUS EEPROM options - RxLED#
            </summary>
        </member>
        <member name="F:MWComLibCS.ExternalControl.FTDI.FT_XSERIES_CBUS_OPTIONS.FT_CBUS_TXLED">
            <summary>
            FT X-Series CBUS EEPROM options - TxLED#
            </summary>
        </member>
        <member name="F:MWComLibCS.ExternalControl.FTDI.FT_XSERIES_CBUS_OPTIONS.FT_CBUS_TXRXLED">
            <summary>
            FT X-Series CBUS EEPROM options - TxRxLED#
            </summary>
        </member>
        <member name="F:MWComLibCS.ExternalControl.FTDI.FT_XSERIES_CBUS_OPTIONS.FT_CBUS_PWREN">
            <summary>
            FT X-Series CBUS EEPROM options - PwrEn#
            </summary>
        </member>
        <member name="F:MWComLibCS.ExternalControl.FTDI.FT_XSERIES_CBUS_OPTIONS.FT_CBUS_SLEEP">
            <summary>
            FT X-Series CBUS EEPROM options - Sleep#
            </summary>
        </member>
        <member name="F:MWComLibCS.ExternalControl.FTDI.FT_XSERIES_CBUS_OPTIONS.FT_CBUS_Drive_0">
            <summary>
            FT X-Series CBUS EEPROM options - Drive_0
            </summary>
        </member>
        <member name="F:MWComLibCS.ExternalControl.FTDI.FT_XSERIES_CBUS_OPTIONS.FT_CBUS_Drive_1">
            <summary>
            FT X-Series CBUS EEPROM options - Drive_1
            </summary>
        </member>
        <member name="F:MWComLibCS.ExternalControl.FTDI.FT_XSERIES_CBUS_OPTIONS.FT_CBUS_GPIO">
            <summary>
            FT X-Series CBUS EEPROM options - GPIO
            </summary>
        </member>
        <member name="F:MWComLibCS.ExternalControl.FTDI.FT_XSERIES_CBUS_OPTIONS.FT_CBUS_TXDEN">
            <summary>
            FT X-Series CBUS EEPROM options - TxdEn
            </summary>
        </member>
        <member name="F:MWComLibCS.ExternalControl.FTDI.FT_XSERIES_CBUS_OPTIONS.FT_CBUS_CLK24MHz">
            <summary>
            FT X-Series CBUS EEPROM options - Clk24MHz
            </summary>
        </member>
        <member name="F:MWComLibCS.ExternalControl.FTDI.FT_XSERIES_CBUS_OPTIONS.FT_CBUS_CLK12MHz">
            <summary>
            FT X-Series CBUS EEPROM options - Clk12MHz
            </summary>
        </member>
        <member name="F:MWComLibCS.ExternalControl.FTDI.FT_XSERIES_CBUS_OPTIONS.FT_CBUS_CLK6MHz">
            <summary>
            FT X-Series CBUS EEPROM options - Clk6MHz
            </summary>
        </member>
        <member name="F:MWComLibCS.ExternalControl.FTDI.FT_XSERIES_CBUS_OPTIONS.FT_CBUS_BCD_Charger">
            <summary>
            FT X-Series CBUS EEPROM options - BCD_Charger
            </summary>
        </member>
        <member name="F:MWComLibCS.ExternalControl.FTDI.FT_XSERIES_CBUS_OPTIONS.FT_CBUS_BCD_Charger_N">
            <summary>
            FT X-Series CBUS EEPROM options - BCD_Charger#
            </summary>
        </member>
        <member name="F:MWComLibCS.ExternalControl.FTDI.FT_XSERIES_CBUS_OPTIONS.FT_CBUS_I2C_TXE">
            <summary>
            FT X-Series CBUS EEPROM options - I2C_TXE#
            </summary>
        </member>
        <member name="F:MWComLibCS.ExternalControl.FTDI.FT_XSERIES_CBUS_OPTIONS.FT_CBUS_I2C_RXF">
            <summary>
            FT X-Series CBUS EEPROM options - I2C_RXF#
            </summary>
        </member>
        <member name="F:MWComLibCS.ExternalControl.FTDI.FT_XSERIES_CBUS_OPTIONS.FT_CBUS_VBUS_Sense">
            <summary>
            FT X-Series CBUS EEPROM options - VBUS_Sense
            </summary>
        </member>
        <member name="F:MWComLibCS.ExternalControl.FTDI.FT_XSERIES_CBUS_OPTIONS.FT_CBUS_BitBang_WR">
            <summary>
            FT X-Series CBUS EEPROM options - BitBang_WR#
            </summary>
        </member>
        <member name="F:MWComLibCS.ExternalControl.FTDI.FT_XSERIES_CBUS_OPTIONS.FT_CBUS_BitBang_RD">
            <summary>
            FT X-Series CBUS EEPROM options - BitBang_RD#
            </summary>
        </member>
        <member name="F:MWComLibCS.ExternalControl.FTDI.FT_XSERIES_CBUS_OPTIONS.FT_CBUS_Time_Stamp">
            <summary>
            FT X-Series CBUS EEPROM options - Time_Stampe
            </summary>
        </member>
        <member name="F:MWComLibCS.ExternalControl.FTDI.FT_XSERIES_CBUS_OPTIONS.FT_CBUS_Keep_Awake">
            <summary>
            FT X-Series CBUS EEPROM options - Keep_Awake#
            </summary>
        </member>
        <member name="T:MWComLibCS.ExternalControl.FTDI.FT_FLAGS">
            <summary>
            Flags that provide information on the FTDI device state
            </summary>
        </member>
        <member name="F:MWComLibCS.ExternalControl.FTDI.FT_FLAGS.FT_FLAGS_OPENED">
            <summary>
            Indicates that the device is open
            </summary>
        </member>
        <member name="F:MWComLibCS.ExternalControl.FTDI.FT_FLAGS.FT_FLAGS_HISPEED">
            <summary>
            Indicates that the device is enumerated as a hi-speed USB device
            </summary>
        </member>
        <member name="T:MWComLibCS.ExternalControl.FTDI.FT_DRIVE_CURRENT">
            <summary>
            Valid values for drive current options on FT2232H, FT4232H and FT232H devices.
            </summary>
        </member>
        <member name="F:MWComLibCS.ExternalControl.FTDI.FT_DRIVE_CURRENT.FT_DRIVE_CURRENT_4MA">
            <summary>
            4mA drive current
            </summary>
        </member>
        <member name="F:MWComLibCS.ExternalControl.FTDI.FT_DRIVE_CURRENT.FT_DRIVE_CURRENT_8MA">
            <summary>
            8mA drive current
            </summary>
        </member>
        <member name="F:MWComLibCS.ExternalControl.FTDI.FT_DRIVE_CURRENT.FT_DRIVE_CURRENT_12MA">
            <summary>
            12mA drive current
            </summary>
        </member>
        <member name="F:MWComLibCS.ExternalControl.FTDI.FT_DRIVE_CURRENT.FT_DRIVE_CURRENT_16MA">
            <summary>
            16mA drive current
            </summary>
        </member>
        <member name="T:MWComLibCS.ExternalControl.FTDI.FT_DEVICE">
            <summary>
            List of FTDI device types
            </summary>
        </member>
        <member name="F:MWComLibCS.ExternalControl.FTDI.FT_DEVICE.FT_DEVICE_BM">
            <summary>
            FT232B or FT245B device
            </summary>
        </member>
        <member name="F:MWComLibCS.ExternalControl.FTDI.FT_DEVICE.FT_DEVICE_AM">
            <summary>
            FT8U232AM or FT8U245AM device
            </summary>
        </member>
        <member name="F:MWComLibCS.ExternalControl.FTDI.FT_DEVICE.FT_DEVICE_100AX">
            1 
            <summary>
            FT8U100AX device
            </summary>
        </member>
        <member name="F:MWComLibCS.ExternalControl.FTDI.FT_DEVICE.FT_DEVICE_UNKNOWN">
            <summary>
            Unknown device
            </summary>
        </member>
        <member name="F:MWComLibCS.ExternalControl.FTDI.FT_DEVICE.FT_DEVICE_2232">
            <summary>
            FT2232 device
            </summary>
        </member>
        <member name="F:MWComLibCS.ExternalControl.FTDI.FT_DEVICE.FT_DEVICE_232R">
            <summary>
            FT232R or FT245R device
            </summary>
        </member>
        <member name="F:MWComLibCS.ExternalControl.FTDI.FT_DEVICE.FT_DEVICE_2232H">
            5
            <summary>
            FT2232H device
            </summary>
        </member>
        <member name="F:MWComLibCS.ExternalControl.FTDI.FT_DEVICE.FT_DEVICE_4232H">
            6
            <summary>
            FT4232H device
            </summary>
        </member>
        <member name="F:MWComLibCS.ExternalControl.FTDI.FT_DEVICE.FT_DEVICE_232H">
            7
            <summary>
            FT232H device
            </summary>
        </member>
        <member name="F:MWComLibCS.ExternalControl.FTDI.FT_DEVICE.FT_DEVICE_X_SERIES">
            8
            <summary>
            FT X-Series device
            </summary>
        </member>
        <member name="F:MWComLibCS.ExternalControl.FTDI.FT_DEVICE.FT_DEVICE_4222H_0">
            9
            <summary>
            FT4222 hi-speed device Mode 0 - 2 interfaces
            </summary>
        </member>
        <member name="F:MWComLibCS.ExternalControl.FTDI.FT_DEVICE.FT_DEVICE_4222H_1_2">
            10
            <summary>
            FT4222 hi-speed device Mode 1 or 2 - 4 interfaces
            </summary>
        </member>
        <member name="F:MWComLibCS.ExternalControl.FTDI.FT_DEVICE.FT_DEVICE_4222H_3">
            11
            <summary>
            FT4222 hi-speed device Mode 3 - 1 interface
            </summary>
        </member>
        <member name="F:MWComLibCS.ExternalControl.FTDI.FT_DEVICE.FT_DEVICE_4222_PROG">
            12
            <summary>
            OTP programmer board for the FT4222.
            </summary>
        </member>
        <member name="F:MWComLibCS.ExternalControl.FTDI.FT_DEVICE.FT_DEVICE_FT900">
            13
            <summary>
            OTP programmer board for the FT900.
            </summary>
        </member>
        <member name="F:MWComLibCS.ExternalControl.FTDI.FT_DEVICE.FT_DEVICE_FT930">
            14
            <summary>
            OTP programmer board for the FT930.
            </summary>
        </member>
        <member name="F:MWComLibCS.ExternalControl.FTDI.FT_DEVICE.FT_DEVICE_UMFTPD3A">
            15
            <summary>
            Flash programmer board for the UMFTPD3A.
            </summary>
        </member>
        <member name="F:MWComLibCS.ExternalControl.FTDI.FT_DEVICE.FT_DEVICE_2233HP">
            16
            <summary>
            FT2233HP hi-speed device.
            </summary>
        </member>
        <member name="F:MWComLibCS.ExternalControl.FTDI.FT_DEVICE.FT_DEVICE_4233HP">
            17
            <summary>
            FT4233HP hi-speed device.
            </summary>
        </member>
        <member name="F:MWComLibCS.ExternalControl.FTDI.FT_DEVICE.FT_DEVICE_2232HP">
            18
            <summary>
            FT2233HP hi-speed device.
            </summary>
        </member>
        <member name="F:MWComLibCS.ExternalControl.FTDI.FT_DEVICE.FT_DEVICE_4232HP">
            19
            <summary>
            FT4233HP hi-speed device.
            </summary>
        </member>
        <member name="F:MWComLibCS.ExternalControl.FTDI.FT_DEVICE.FT_DEVICE_233HP">
            20
            <summary>
            FT233HP hi-speed device.
            </summary>
        </member>
        <member name="F:MWComLibCS.ExternalControl.FTDI.FT_DEVICE.FT_DEVICE_232HP">
            21
            <summary>
            FT232HP hi-speed device.
            </summary>
        </member>
        <member name="F:MWComLibCS.ExternalControl.FTDI.FT_DEVICE.FT_DEVICE_2232HA">
            22
            <summary>
            FT2233HA hi-speed device.
            </summary>
        </member>
        <member name="F:MWComLibCS.ExternalControl.FTDI.FT_DEVICE.FT_DEVICE_4232HA">
            23
            <summary>
            FT4233HA hi-speed device.
            </summary>
        </member>
        <member name="P:MWComLibCS.ExternalControl.FTDI.IsOpen">
            <summary>
            Gets the open status of the device.
            </summary>
        </member>
        <member name="P:MWComLibCS.ExternalControl.FTDI.InterfaceIdentifier">
            <summary>
            Gets the interface identifier.
            </summary>
        </member>
        <member name="M:MWComLibCS.ExternalControl.FTDI.#ctor">
            <summary>コンストラクタ</summary>
        </member>
        <member name="M:MWComLibCS.ExternalControl.FTDI.#ctor(System.String)">
            <summary>
            Non default constructor allowing passing of string for dll handle.
            </summary>
        </member>
        <member name="M:MWComLibCS.ExternalControl.FTDI.Finalize">
            <summary>
            Destructor for the FTDI class.
            </summary>
        </member>
        <member name="M:MWComLibCS.ExternalControl.FTDI.GetNumberOfDevices(System.UInt32@)">
            <summary>
            Gets the number of FTDI devices available.  
            </summary>
            <returns>FT_STATUS value from FT_CreateDeviceInfoList in FTD2XX.DLL</returns>
            <param name="devcount">The number of FTDI devices available.</param>
        </member>
        <member name="M:MWComLibCS.ExternalControl.FTDI.GetDeviceList(MWComLibCS.ExternalControl.FTDI.FT_DEVICE_INFO_NODE[])">
            <summary>
            Gets information on all of the FTDI devices available.  
            </summary>
            <returns>FT_STATUS value from FT_GetDeviceInfoDetail in FTD2XX.DLL</returns>
            <param name="devicelist">An array of type FT_DEVICE_INFO_NODE to contain the device information for all available devices.</param>
            <exception cref="T:MWComLibCS.ExternalControl.FTDI.FT_EXCEPTION">Thrown when the supplied buffer is not large enough to contain the device info list.</exception>
        </member>
        <member name="M:MWComLibCS.ExternalControl.FTDI.OpenByIndex(System.UInt32)">
            <summary>
            Opens the FTDI device with the specified index.  
            </summary>
            <returns>FT_STATUS value from FT_Open in FTD2XX.DLL</returns>
            <param name="index">Index of the device to open.
            Note that this cannot be guaranteed to open a specific device.</param>
            <remarks>Initialises the device to 8 data bits, 1 stop bit, no parity, no flow control and 9600 Baud.</remarks>
        </member>
        <member name="M:MWComLibCS.ExternalControl.FTDI.OpenBySerialNumber(System.String)">
            <summary>
            Opens the FTDI device with the specified serial number.  
            </summary>
            <returns>FT_STATUS value from FT_OpenEx in FTD2XX.DLL</returns>
            <param name="serialnumber">Serial number of the device to open.</param>
            <remarks>Initialises the device to 8 data bits, 1 stop bit, no parity, no flow control and 9600 Baud.</remarks>
        </member>
        <member name="M:MWComLibCS.ExternalControl.FTDI.OpenByDescription(System.String)">
            <summary>
            Opens the FTDI device with the specified description.  
            </summary>
            <returns>FT_STATUS value from FT_OpenEx in FTD2XX.DLL</returns>
            <param name="description">Description of the device to open.</param>
            <remarks>Initialises the device to 8 data bits, 1 stop bit, no parity, no flow control and 9600 Baud.</remarks>
        </member>
        <member name="M:MWComLibCS.ExternalControl.FTDI.OpenByLocation(System.UInt32)">
            <summary>
            Opens the FTDI device at the specified physical location.  
            </summary>
            <returns>FT_STATUS value from FT_OpenEx in FTD2XX.DLL</returns>
            <param name="location">Location of the device to open.</param>
            <remarks>Initialises the device to 8 data bits, 1 stop bit, no parity, no flow control and 9600 Baud.</remarks>
        </member>
        <member name="M:MWComLibCS.ExternalControl.FTDI.Close">
            <summary>
            Closes the handle to an open FTDI device.  
            </summary>
            <returns>FT_STATUS value from FT_Close in FTD2XX.DLL</returns>
        </member>
        <member name="M:MWComLibCS.ExternalControl.FTDI.Read(System.Byte[],System.UInt32,System.UInt32@)">
            <summary>
            Read data from an open FTDI device.
            </summary>
            <returns>FT_STATUS value from FT_Read in FTD2XX.DLL</returns>
            <param name="dataBuffer">An array of bytes which will be populated with the data read from the device.</param>
            <param name="numBytesToRead">The number of bytes requested from the device.</param>
            <param name="numBytesRead">The number of bytes actually read.</param>
        </member>
        <member name="M:MWComLibCS.ExternalControl.FTDI.Read(System.String@,System.UInt32,System.UInt32@)">
            <summary>
            Read data from an open FTDI device.
            </summary>
            <returns>FT_STATUS value from FT_Read in FTD2XX.DLL</returns>
            <param name="dataBuffer">A string containing the data read</param>
            <param name="numBytesToRead">The number of bytes requested from the device.</param>
            <param name="numBytesRead">The number of bytes actually read.</param>
        </member>
        <member name="M:MWComLibCS.ExternalControl.FTDI.Write(System.Byte[],System.Int32,System.UInt32@)">
            <summary>
            Write data to an open FTDI device.
            </summary>
            <returns>FT_STATUS value from FT_Write in FTD2XX.DLL</returns>
            <param name="dataBuffer">An array of bytes which contains the data to be written to the device.</param>
            <param name="numBytesToWrite">The number of bytes to be written to the device.</param>
            <param name="numBytesWritten">The number of bytes actually written to the device.</param>
        </member>
        <member name="M:MWComLibCS.ExternalControl.FTDI.Write(System.Byte[],System.UInt32,System.UInt32@)">
            <summary>
            Write data to an open FTDI device.
            </summary>
            <returns>FT_STATUS value from FT_Write in FTD2XX.DLL</returns>
            <param name="dataBuffer">An array of bytes which contains the data to be written to the device.</param>
            <param name="numBytesToWrite">The number of bytes to be written to the device.</param>
            <param name="numBytesWritten">The number of bytes actually written to the device.</param>
        </member>
        <member name="M:MWComLibCS.ExternalControl.FTDI.Write(System.String,System.Int32,System.UInt32@)">
            <summary>
            Write data to an open FTDI device.
            </summary>
            <returns>FT_STATUS value from FT_Write in FTD2XX.DLL</returns>
            <param name="dataBuffer">A  string which contains the data to be written to the device.</param>
            <param name="numBytesToWrite">The number of bytes to be written to the device.</param>
            <param name="numBytesWritten">The number of bytes actually written to the device.</param>
        </member>
        <member name="M:MWComLibCS.ExternalControl.FTDI.Write(System.String,System.UInt32,System.UInt32@)">
            <summary>
            Write data to an open FTDI device.
            </summary>
            <returns>FT_STATUS value from FT_Write in FTD2XX.DLL</returns>
            <param name="dataBuffer">A  string which contains the data to be written to the device.</param>
            <param name="numBytesToWrite">The number of bytes to be written to the device.</param>
            <param name="numBytesWritten">The number of bytes actually written to the device.</param>
        </member>
        <member name="M:MWComLibCS.ExternalControl.FTDI.ResetDevice">
            <summary>
            Reset an open FTDI device.
            </summary>
            <returns>FT_STATUS value from FT_ResetDevice in FTD2XX.DLL</returns>
        </member>
        <member name="M:MWComLibCS.ExternalControl.FTDI.Purge(System.UInt32)">
            <summary>
            Purge data from the devices transmit and/or receive buffers.
            </summary>
            <returns>FT_STATUS value from FT_Purge in FTD2XX.DLL</returns>
            <param name="purgemask">Specifies which buffer(s) to be purged.  Valid values are any combination of the following flags: FT_PURGE_RX, FT_PURGE_TX</param>
        </member>
        <member name="M:MWComLibCS.ExternalControl.FTDI.SetEventNotification(System.UInt32,System.Threading.EventWaitHandle)">
            <summary>
            Register for event notification.
            </summary>
            <returns>FT_STATUS value from FT_SetEventNotification in FTD2XX.DLL</returns>
            <remarks>After setting event notification, the event can be caught by executing the WaitOne() method of the EventWaitHandle.  If multiple event types are being monitored, the event that fired can be determined from the GetEventType method.</remarks>
            <param name="eventmask">The type of events to signal.  Can be any combination of the following: FT_EVENT_RXCHAR, FT_EVENT_MODEM_STATUS, FT_EVENT_LINE_STATUS</param>
            <param name="eventhandle">Handle to the event that will receive the notification</param>
        </member>
        <member name="M:MWComLibCS.ExternalControl.FTDI.StopInTask">
            <summary>
            Stops the driver issuing USB in requests.
            </summary>
            <returns>FT_STATUS value from FT_StopInTask in FTD2XX.DLL</returns>
        </member>
        <member name="M:MWComLibCS.ExternalControl.FTDI.RestartInTask">
            <summary>
            Resumes the driver issuing USB in requests.
            </summary>
            <returns>FT_STATUS value from FT_RestartInTask in FTD2XX.DLL</returns>
        </member>
        <member name="M:MWComLibCS.ExternalControl.FTDI.ResetPort">
            <summary>
            Resets the device port.
            </summary>
            <returns>FT_STATUS value from FT_ResetPort in FTD2XX.DLL</returns>
        </member>
        <member name="M:MWComLibCS.ExternalControl.FTDI.CyclePort">
            <summary>
            Causes the device to be re-enumerated on the USB bus.  This is equivalent to unplugging and replugging the device.
            Also calls FT_Close if FT_CyclePort is successful, so no need to call this separately in the application.
            </summary>
            <returns>FT_STATUS value from FT_CyclePort in FTD2XX.DLL</returns>
        </member>
        <member name="M:MWComLibCS.ExternalControl.FTDI.Rescan">
            <summary>
            Causes the system to check for USB hardware changes.  This is equivalent to clicking on the "Scan for hardware changes" button in the Device Manager.
            </summary>
            <returns>FT_STATUS value from FT_Rescan in FTD2XX.DLL</returns>
        </member>
        <member name="M:MWComLibCS.ExternalControl.FTDI.Reload(System.UInt16,System.UInt16)">
            <summary>
            Forces a reload of the driver for devices with a specific VID and PID combination.
            </summary>
            <returns>FT_STATUS value from FT_Reload in FTD2XX.DLL</returns>
            <remarks>If the VID and PID parameters are 0, the drivers for USB root hubs will be reloaded, causing all USB devices connected to reload their drivers</remarks>
            <param name="VendorID">Vendor ID of the devices to have the driver reloaded</param>
            <param name="ProductID">Product ID of the devices to have the driver reloaded</param>
        </member>
        <member name="M:MWComLibCS.ExternalControl.FTDI.SetBitMode(System.Byte,System.Byte)">
            <summary>
            Puts the device in a mode other than the default UART or FIFO mode.
            </summary>
            <returns>FT_STATUS value from FT_SetBitMode in FTD2XX.DLL</returns>
            <param name="Mask">Sets up which bits are inputs and which are outputs.  A bit value of 0 sets the corresponding pin to an input, a bit value of 1 sets the corresponding pin to an output.
            In the case of CBUS Bit Bang, the upper nibble of this value controls which pins are inputs and outputs, while the lower nibble controls which of the outputs are high and low.</param>
            <param name="BitMode"> For FT232H devices, valid values are FT_BIT_MODE_RESET, FT_BIT_MODE_ASYNC_BITBANG, FT_BIT_MODE_MPSSE, FT_BIT_MODE_SYNC_BITBANG, FT_BIT_MODE_CBUS_BITBANG, FT_BIT_MODE_MCU_HOST, FT_BIT_MODE_FAST_SERIAL, FT_BIT_MODE_SYNC_FIFO.
            For FT2232H devices, valid values are FT_BIT_MODE_RESET, FT_BIT_MODE_ASYNC_BITBANG, FT_BIT_MODE_MPSSE, FT_BIT_MODE_SYNC_BITBANG, FT_BIT_MODE_MCU_HOST, FT_BIT_MODE_FAST_SERIAL, FT_BIT_MODE_SYNC_FIFO.
            For FT4232H devices, valid values are FT_BIT_MODE_RESET, FT_BIT_MODE_ASYNC_BITBANG, FT_BIT_MODE_MPSSE, FT_BIT_MODE_SYNC_BITBANG.
            For FT232R devices, valid values are FT_BIT_MODE_RESET, FT_BIT_MODE_ASYNC_BITBANG, FT_BIT_MODE_SYNC_BITBANG, FT_BIT_MODE_CBUS_BITBANG.
            For FT245R devices, valid values are FT_BIT_MODE_RESET, FT_BIT_MODE_ASYNC_BITBANG, FT_BIT_MODE_SYNC_BITBANG.
            For FT2232 devices, valid values are FT_BIT_MODE_RESET, FT_BIT_MODE_ASYNC_BITBANG, FT_BIT_MODE_MPSSE, FT_BIT_MODE_SYNC_BITBANG, FT_BIT_MODE_MCU_HOST, FT_BIT_MODE_FAST_SERIAL.
            For FT232B and FT245B devices, valid values are FT_BIT_MODE_RESET, FT_BIT_MODE_ASYNC_BITBANG.</param>
            <exception cref="T:MWComLibCS.ExternalControl.FTDI.FT_EXCEPTION">Thrown when the current device does not support the requested bit mode.</exception>
        </member>
        <member name="M:MWComLibCS.ExternalControl.FTDI.GetPinStates(System.Byte@)">
            <summary>
            Gets the instantaneous state of the device IO pins.
            </summary>
            <returns>FT_STATUS value from FT_GetBitMode in FTD2XX.DLL</returns>
            <param name="BitMode">A bitmap value containing the instantaneous state of the device IO pins</param>
        </member>
        <member name="M:MWComLibCS.ExternalControl.FTDI.GetDeviceType(MWComLibCS.ExternalControl.FTDI.FT_DEVICE@)">
            <summary>
            Gets the chip type of the current device.
            </summary>
            <returns>FT_STATUS value from FT_GetDeviceInfo in FTD2XX.DLL</returns>
            <param name="DeviceType">The FTDI chip type of the current device.</param>
        </member>
        <member name="M:MWComLibCS.ExternalControl.FTDI.GetDeviceID(System.UInt32@)">
            <summary>
            Gets the Vendor ID and Product ID of the current device.
            </summary>
            <returns>FT_STATUS value from FT_GetDeviceInfo in FTD2XX.DLL</returns>
            <param name="DeviceID">The device ID (Vendor ID and Product ID) of the current device.</param>
        </member>
        <member name="M:MWComLibCS.ExternalControl.FTDI.GetDescription(System.String@)">
            <summary>
            Gets the description of the current device.
            </summary>
            <returns>FT_STATUS value from FT_GetDeviceInfo in FTD2XX.DLL</returns>
            <param name="Description">The description of the current device.</param>
        </member>
        <member name="M:MWComLibCS.ExternalControl.FTDI.GetSerialNumber(System.String@)">
            <summary>
            Gets the serial number of the current device.
            </summary>
            <returns>FT_STATUS value from FT_GetDeviceInfo in FTD2XX.DLL</returns>
            <param name="SerialNumber">The serial number of the current device.</param>
        </member>
        <member name="M:MWComLibCS.ExternalControl.FTDI.GetRxBytesAvailable(System.UInt32@)">
            <summary>
            Gets the number of bytes available in the receive buffer.
            </summary>
            <returns>FT_STATUS value from FT_GetQueueStatus in FTD2XX.DLL</returns>
            <param name="RxQueue">The number of bytes available to be read.</param>
        </member>
        <member name="M:MWComLibCS.ExternalControl.FTDI.GetTxBytesWaiting(System.UInt32@)">
            <summary>
            Gets the number of bytes waiting in the transmit buffer.
            </summary>
            <returns>FT_STATUS value from FT_GetStatus in FTD2XX.DLL</returns>
            <param name="TxQueue">The number of bytes waiting to be sent.</param>
        </member>
        <member name="M:MWComLibCS.ExternalControl.FTDI.GetEventType(System.UInt32@)">
            <summary>
            Gets the event type after an event has fired.  Can be used to distinguish which event has been triggered when waiting on multiple event types.
            </summary>
            <returns>FT_STATUS value from FT_GetStatus in FTD2XX.DLL</returns>
            <param name="EventType">The type of event that has occurred.</param>
        </member>
        <member name="M:MWComLibCS.ExternalControl.FTDI.GetModemStatus(System.Byte@)">
            <summary>
            Gets the current modem status.
            </summary>
            <returns>FT_STATUS value from FT_GetModemStatus in FTD2XX.DLL</returns>
            <param name="ModemStatus">A bit map representaion of the current modem status.</param>
        </member>
        <member name="M:MWComLibCS.ExternalControl.FTDI.GetLineStatus(System.Byte@)">
            <summary>
            Gets the current line status.
            </summary>
            <returns>FT_STATUS value from FT_GetModemStatus in FTD2XX.DLL</returns>
            <param name="LineStatus">A bit map representaion of the current line status.</param>
        </member>
        <member name="M:MWComLibCS.ExternalControl.FTDI.SetBaudRate(System.UInt32)">
            <summary>
            Sets the current Baud rate.
            </summary>
            <returns>FT_STATUS value from FT_SetBaudRate in FTD2XX.DLL</returns>
            <param name="BaudRate">The desired Baud rate for the device.</param>
        </member>
        <member name="M:MWComLibCS.ExternalControl.FTDI.SetDataCharacteristics(System.Byte,System.Byte,System.Byte)">
            <summary>
            Sets the data bits, stop bits and parity for the device.
            </summary>
            <returns>FT_STATUS value from FT_SetDataCharacteristics in FTD2XX.DLL</returns>
            <param name="DataBits">The number of data bits for UART data.  Valid values are FT_DATA_BITS.FT_DATA_7 or FT_DATA_BITS.FT_BITS_8</param>
            <param name="StopBits">The number of stop bits for UART data.  Valid values are FT_STOP_BITS.FT_STOP_BITS_1 or FT_STOP_BITS.FT_STOP_BITS_2</param>
            <param name="Parity">The parity of the UART data.  Valid values are FT_PARITY.FT_PARITY_NONE, FT_PARITY.FT_PARITY_ODD, FT_PARITY.FT_PARITY_EVEN, FT_PARITY.FT_PARITY_MARK or FT_PARITY.FT_PARITY_SPACE</param>
        </member>
        <member name="M:MWComLibCS.ExternalControl.FTDI.SetFlowControl(System.UInt16,System.Byte,System.Byte)">
            <summary>
            Sets the flow control type.
            </summary>
            <returns>FT_STATUS value from FT_SetFlowControl in FTD2XX.DLL</returns>
            <param name="FlowControl">The type of flow control for the UART.  Valid values are FT_FLOW_CONTROL.FT_FLOW_NONE, FT_FLOW_CONTROL.FT_FLOW_RTS_CTS, FT_FLOW_CONTROL.FT_FLOW_DTR_DSR or FT_FLOW_CONTROL.FT_FLOW_XON_XOFF</param>
            <param name="Xon">The Xon character for Xon/Xoff flow control.  Ignored if not using Xon/XOff flow control.</param>
            <param name="Xoff">The Xoff character for Xon/Xoff flow control.  Ignored if not using Xon/XOff flow control.</param>
        </member>
        <member name="M:MWComLibCS.ExternalControl.FTDI.SetRTS(System.Boolean)">
            <summary>
            Asserts or de-asserts the Request To Send (RTS) line.
            </summary>
            <returns>FT_STATUS value from FT_SetRts or FT_ClrRts in FTD2XX.DLL</returns>
            <param name="Enable">If true, asserts RTS.  If false, de-asserts RTS</param>
        </member>
        <member name="M:MWComLibCS.ExternalControl.FTDI.SetDTR(System.Boolean)">
            <summary>
            Asserts or de-asserts the Data Terminal Ready (DTR) line.
            </summary>
            <returns>FT_STATUS value from FT_SetDtr or FT_ClrDtr in FTD2XX.DLL</returns>
            <param name="Enable">If true, asserts DTR.  If false, de-asserts DTR.</param>
        </member>
        <member name="M:MWComLibCS.ExternalControl.FTDI.SetTimeouts(System.UInt32,System.UInt32)">
            <summary>
            Sets the read and write timeout values.
            </summary>
            <returns>FT_STATUS value from FT_SetTimeouts in FTD2XX.DLL</returns>
            <param name="ReadTimeout">Read timeout value in ms.  A value of 0 indicates an infinite timeout.</param>
            <param name="WriteTimeout">Write timeout value in ms.  A value of 0 indicates an infinite timeout.</param>
        </member>
        <member name="M:MWComLibCS.ExternalControl.FTDI.SetBreak(System.Boolean)">
            <summary>
            Sets or clears the break state.
            </summary>
            <returns>FT_STATUS value from FT_SetBreakOn or FT_SetBreakOff in FTD2XX.DLL</returns>
            <param name="Enable">If true, sets break on.  If false, sets break off.</param>
        </member>
        <member name="M:MWComLibCS.ExternalControl.FTDI.SetResetPipeRetryCount(System.UInt32)">
            <summary>
            Gets or sets the reset pipe retry count.  Default value is 50.
            </summary>
            <returns>FT_STATUS vlaue from FT_SetResetPipeRetryCount in FTD2XX.DLL</returns>
            <param name="ResetPipeRetryCount">The reset pipe retry count.  
            Electrically noisy environments may benefit from a larger value.</param>
        </member>
        <member name="M:MWComLibCS.ExternalControl.FTDI.GetDriverVersion(System.UInt32@)">
            <summary>
            Gets the current FTDIBUS.SYS driver version number.
            </summary>
            <returns>FT_STATUS value from FT_GetDriverVersion in FTD2XX.DLL</returns>
            <param name="DriverVersion">The current driver version number.</param>
        </member>
        <member name="M:MWComLibCS.ExternalControl.FTDI.GetLibraryVersion(System.UInt32@)">
            <summary>
            Gets the current FTD2XX.DLL driver version number.
            </summary>
            <returns>FT_STATUS value from FT_GetLibraryVersion in FTD2XX.DLL</returns>
            <param name="LibraryVersion">The current library version.</param>
        </member>
        <member name="M:MWComLibCS.ExternalControl.FTDI.SetDeadmanTimeout(System.UInt32)">
            <summary>
            Sets the USB deadman timeout value.  Default is 5000ms.
            </summary>
            <returns>FT_STATUS value from FT_SetDeadmanTimeout in FTD2XX.DLL</returns>
            <param name="DeadmanTimeout">The deadman timeout value in ms.  Default is 5000ms.</param>
        </member>
        <member name="M:MWComLibCS.ExternalControl.FTDI.SetLatency(System.Byte)">
            <summary>
            Sets the value of the latency timer.  Default value is 16ms.
            </summary>
            <returns>FT_STATUS value from FT_SetLatencyTimer in FTD2XX.DLL</returns>
            <param name="Latency">The latency timer value in ms.
            Valid values are 2ms - 255ms for FT232BM, FT245BM and FT2232 devices.
            Valid values are 0ms - 255ms for other devices.</param>
        </member>
        <member name="M:MWComLibCS.ExternalControl.FTDI.GetLatency(System.Byte@)">
            <summary>
            Gets the value of the latency timer.  Default value is 16ms.
            </summary>
            <returns>FT_STATUS value from FT_GetLatencyTimer in FTD2XX.DLL</returns>
            <param name="Latency">The latency timer value in ms.</param>
        </member>
        <member name="M:MWComLibCS.ExternalControl.FTDI.InTransferSize(System.UInt32)">
            <summary>
            Sets the USB IN and OUT transfer sizes.
            </summary>
            <returns>FT_STATUS value from FT_SetUSBParameters in FTD2XX.DLL</returns>
            <param name="InTransferSize">The USB IN transfer size in bytes.</param>
        </member>
        <member name="M:MWComLibCS.ExternalControl.FTDI.SetCharacters(System.Byte,System.Boolean,System.Byte,System.Boolean)">
            <summary>
            Sets an event character, an error character and enables or disables them.
            </summary>
            <returns>FT_STATUS value from FT_SetChars in FTD2XX.DLL</returns>
            <param name="EventChar">A character that will be tigger an IN to the host when this character is received.</param>
            <param name="EventCharEnable">Determines if the EventChar is enabled or disabled.</param>
            <param name="ErrorChar">A character that will be inserted into the data stream to indicate that an error has occurred.</param>
            <param name="ErrorCharEnable">Determines if the ErrorChar is enabled or disabled.</param>
        </member>
        <member name="M:MWComLibCS.ExternalControl.FTDI.EEUserAreaSize(System.UInt32@)">
            <summary>
            Gets the size of the EEPROM user area.
            </summary>
            <returns>FT_STATUS value from FT_EE_UASize in FTD2XX.DLL</returns>
            <param name="UASize">The EEPROM user area size in bytes.</param>
        </member>
        <member name="M:MWComLibCS.ExternalControl.FTDI.GetCOMPort(System.String@)">
            <summary>
            Gets the corresponding COM port number for the current device.  If no COM port is exposed, an empty string is returned.
            </summary>
            <returns>FT_STATUS value from FT_GetComPortNumber in FTD2XX.DLL</returns>
            <param name="ComPortName">The COM port name corresponding to the current device.  If no COM port is installed, an empty string is passed back.</param>
        </member>
        <member name="M:MWComLibCS.ExternalControl.FTDI.VendorCmdGet(System.UInt16,System.Byte[],System.UInt16)">
            <summary>
            Get data from the FT4222 using the vendor command interface.
            </summary>
            <returns>FT_STATUS value from FT_VendorCmdSet in FTD2XX.DLL</returns>
        </member>
        <member name="M:MWComLibCS.ExternalControl.FTDI.VendorCmdSet(System.UInt16,System.Byte[],System.UInt16)">
            <summary>
            Set data from the FT4222 using the vendor command interface.
            </summary>
            <returns>FT_STATUS value from FT_VendorCmdSet in FTD2XX.DLL</returns>
        </member>
        <member name="M:MWComLibCS.ExternalControl.FTDI.ReadEEPROMLocation(System.UInt32,System.UInt16@)">
            <summary>
            Reads an individual word value from a specified location in the device's EEPROM.
            </summary>
            <returns>FT_STATUS value from FT_ReadEE in FTD2XX.DLL</returns>
            <param name="Address">The EEPROM location to read data from</param>
            <param name="EEValue">The WORD value read from the EEPROM location specified in the Address paramter</param>
        </member>
        <member name="M:MWComLibCS.ExternalControl.FTDI.WriteEEPROMLocation(System.UInt32,System.UInt16)">
            <summary>
            Writes an individual word value to a specified location in the device's EEPROM.
            </summary>
            <returns>FT_STATUS value from FT_WriteEE in FTD2XX.DLL</returns>
            <param name="Address">The EEPROM location to read data from</param>
            <param name="EEValue">The WORD value to write to the EEPROM location specified by the Address parameter</param>
        </member>
        <member name="M:MWComLibCS.ExternalControl.FTDI.EraseEEPROM">
            <summary>
            Erases the device EEPROM.
            </summary>
            <returns>FT_STATUS value from FT_EraseEE in FTD2XX.DLL</returns>
            <exception cref="T:MWComLibCS.ExternalControl.FTDI.FT_EXCEPTION">Thrown when attempting to erase the EEPROM of a device with an internal EEPROM such as an FT232R or FT245R.</exception>
        </member>
        <member name="M:MWComLibCS.ExternalControl.FTDI.EEReadUserArea(System.Byte[],System.UInt32@)">
            <summary>
            Reads data from the user area of the device EEPROM.
            </summary>
            <returns>FT_STATUS from FT_UARead in FTD2XX.DLL</returns>
            <param name="UserAreaDataBuffer">An array of bytes which will be populated with the data read from the device EEPROM user area.</param>
            <param name="numBytesRead">The number of bytes actually read from the EEPROM user area.</param>
        </member>
        <member name="M:MWComLibCS.ExternalControl.FTDI.EEWriteUserArea(System.Byte[])">
            <summary>
            Writes data to the user area of the device EEPROM.
            </summary>
            <returns>FT_STATUS value from FT_UAWrite in FTD2XX.DLL</returns>
            <param name="UserAreaDataBuffer">An array of bytes which will be written to the device EEPROM user area.</param>
        </member>
        <member name="T:MWComLibCS.ExternalControl.FTDI.FT_DEVICE_INFO_NODE">
            <summary>
            Type that holds device information for GetDeviceInformation method.
            Used with FT_GetDeviceInfo and FT_GetDeviceInfoDetail in FTD2XX.DLL
            </summary>
        </member>
        <member name="F:MWComLibCS.ExternalControl.FTDI.FT_DEVICE_INFO_NODE.Flags">
            <summary>
            Indicates device state.  Can be any combination of the following: FT_FLAGS_OPENED, FT_FLAGS_HISPEED
            </summary>
        </member>
        <member name="F:MWComLibCS.ExternalControl.FTDI.FT_DEVICE_INFO_NODE.Type">
            <summary>
            Indicates the device type.  Can be one of the following: FT_DEVICE_232R, FT_DEVICE_2232C, FT_DEVICE_BM, FT_DEVICE_AM, FT_DEVICE_100AX or FT_DEVICE_UNKNOWN
            </summary>
        </member>
        <member name="F:MWComLibCS.ExternalControl.FTDI.FT_DEVICE_INFO_NODE.ID">
            <summary>
            The Vendor ID and Product ID of the device
            </summary>
        </member>
        <member name="F:MWComLibCS.ExternalControl.FTDI.FT_DEVICE_INFO_NODE.LocId">
            <summary>
            The physical location identifier of the device
            </summary>
        </member>
        <member name="F:MWComLibCS.ExternalControl.FTDI.FT_DEVICE_INFO_NODE.SerialNumber">
            <summary>
            The device serial number
            </summary>
        </member>
        <member name="F:MWComLibCS.ExternalControl.FTDI.FT_DEVICE_INFO_NODE.Description">
            <summary>
            The device description
            </summary>
        </member>
        <member name="F:MWComLibCS.ExternalControl.FTDI.FT_DEVICE_INFO_NODE.ftHandle">
            <summary>
            The device handle.  This value is not used externally and is provided for information only.
            If the device is not open, this value is 0.
            </summary>
        </member>
        <member name="T:MWComLibCS.ExternalControl.FTDI.FT_EEPROM_DATA">
            <summary>
            Common EEPROM elements for all devices.  Inherited to specific device type EEPROMs.
            </summary>
        </member>
        <member name="F:MWComLibCS.ExternalControl.FTDI.FT_EEPROM_DATA.VendorID">
            <summary>
            Vendor ID as supplied by the USB Implementers Forum
            </summary>
        </member>
        <member name="F:MWComLibCS.ExternalControl.FTDI.FT_EEPROM_DATA.ProductID">
            <summary>
            Product ID
            </summary>
        </member>
        <member name="F:MWComLibCS.ExternalControl.FTDI.FT_EEPROM_DATA.Manufacturer">
            <summary>
            Manufacturer name string
            </summary>
        </member>
        <member name="F:MWComLibCS.ExternalControl.FTDI.FT_EEPROM_DATA.ManufacturerID">
            <summary>
            Manufacturer name abbreviation to be used as a prefix for automatically generated serial numbers
            </summary>
        </member>
        <member name="F:MWComLibCS.ExternalControl.FTDI.FT_EEPROM_DATA.Description">
            <summary>
            Device description string
            </summary>
        </member>
        <member name="F:MWComLibCS.ExternalControl.FTDI.FT_EEPROM_DATA.SerialNumber">
            <summary>
            Device serial number string
            </summary>
        </member>
        <member name="F:MWComLibCS.ExternalControl.FTDI.FT_EEPROM_DATA.MaxPower">
            <summary>
            Maximum power the device needs
            </summary>
        </member>
        <member name="F:MWComLibCS.ExternalControl.FTDI.FT_EEPROM_DATA.SelfPowered">
            <summary>
            Indicates if the device has its own power supply (self-powered) or gets power from the USB port (bus-powered)
            </summary>
        </member>
        <member name="F:MWComLibCS.ExternalControl.FTDI.FT_EEPROM_DATA.RemoteWakeup">
            <summary>
            Determines if the device can wake the host PC from suspend by toggling the RI line
            </summary>
        </member>
        <member name="T:MWComLibCS.ExternalControl.FTDI.FT_EXCEPTION">
            <summary>FTDIクラス内のエラーによってスローされる例外</summary>
        </member>
        <member name="M:MWComLibCS.ExternalControl.FTDI.FT_EXCEPTION.#ctor">
            <summary></summary>
        </member>
        <member name="M:MWComLibCS.ExternalControl.FTDI.FT_EXCEPTION.#ctor(System.String)">
            <summary></summary>
            <param name="message"></param>
        </member>
        <member name="M:MWComLibCS.ExternalControl.FTDI.FT_EXCEPTION.#ctor(System.String,System.Exception)">
            <summary></summary>
            <param name="message"></param>
            <param name="inner"></param>
        </member>
        <member name="M:MWComLibCS.ExternalControl.FTDI.FT_EXCEPTION.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary></summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:MWComLibCS.ExternalControl.FTDI.ErrorHandler(MWComLibCS.ExternalControl.FTDI.FT_STATUS,MWComLibCS.ExternalControl.FTDI.FT_ERROR)">
            <summary>エラーハンドラ<br />
            FT_STATUSとFT_ERRORから例外を生成してスローする</summary>
            <param name="ftStatus">FT_STATUS</param>
            <param name="ftErrorCondition">ET_ERROR</param>
            <exception cref="T:MWComLibCS.ExternalControl.FTDI.FT_EXCEPTION">FT_STATUSとFT_ERRORに応じた例外</exception>
        </member>
        <member name="T:MWComLibCS.ExternalControl.NiDioSyncControl">
            <summary>NI-DIO 同期型簡易コントロール</summary>
        </member>
        <member name="P:MWComLibCS.ExternalControl.NiDioSyncControl.Device">
            <summary>使用デバイスのインスタンス取得</summary>
        </member>
        <member name="P:MWComLibCS.ExternalControl.NiDioSyncControl.DeviceName">
            <summary>デバイス名(ID)取得</summary>
        </member>
        <member name="P:MWComLibCS.ExternalControl.NiDioSyncControl.ProductName">
            <summary>デバイス型名取得</summary>
        </member>
        <member name="P:MWComLibCS.ExternalControl.NiDioSyncControl.PrductNumber">
            <summary>デバイス型コード取得</summary>
        </member>
        <member name="P:MWComLibCS.ExternalControl.NiDioSyncControl.SerialNumber">
            <summary>デバイスシリアル番号取得</summary>
        </member>
        <member name="M:MWComLibCS.ExternalControl.NiDioSyncControl.#ctor(System.String,System.Boolean)">
            <summary>コンストラクタ</summary>
            <param name="deviceName">デバイス名(デバイスID)指定</param>
            <param name="leaveLoad">オブジェクト破棄後もデバイスをロードのままにする</param>
        </member>
        <member name="M:MWComLibCS.ExternalControl.NiDioSyncControl.Finalize">
            <summary>デストラクタ</summary>
        </member>
        <member name="M:MWComLibCS.ExternalControl.NiDioSyncControl.Dispose">
            <summary>コンストラクタ</summary>
        </member>
        <member name="T:MWComLibCS.ExternalControl.NiDAQmxControl">
            <summary>NI-DAQmx struct</summary>
        </member>
        <member name="P:MWComLibCS.ExternalControl.NiDAQmxControl.GetLocalDevices">
            <summary>接続されているデバイス名一覧取得</summary>
        </member>
        <member name="M:MWComLibCS.ExternalControl.NiDAQmxControl.GetLocalDevice(System.String)">
            <summary>接続されているデバイスのインスタンスを取得</summary>
            <param name="deviceName">対象デバイス名</param>
            <returns>対象デバイスのインスタンス</returns>
        </member>
        <member name="M:MWComLibCS.ExternalControl.NiDAQmxControl.GetProductName(NationalInstruments.DAQmx.Device)">
            <summary>装置型番取得</summary>
            <param name="device">対象デバイスのインスタンス</param>
            <returns></returns>
        </member>
        <member name="M:MWComLibCS.ExternalControl.NiDAQmxControl.GetProductName(System.String)">
            <summary>装置型番取得</summary>
            <param name="deviceName">対象デバイス名</param>
            <returns></returns>
        </member>
        <member name="M:MWComLibCS.ExternalControl.NiDAQmxControl.GetProductCategory(NationalInstruments.DAQmx.Device)">
            <summary>装置種別の識別コード取得</summary>
            <param name="device">対象デバイスのインスタンス</param>
            <returns></returns>
        </member>
        <member name="M:MWComLibCS.ExternalControl.NiDAQmxControl.GetProductCategory(System.String)">
            <summary>装置種別の識別コード取得</summary>
            <param name="deviceName">対象デバイス名</param>
            <returns></returns>
        </member>
        <member name="M:MWComLibCS.ExternalControl.NiDAQmxControl.GetPrductNumber(NationalInstruments.DAQmx.Device)">
            <summary>装置の型コード取得</summary>
            <param name="device">対象デバイスのインスタンス</param>
            <returns></returns>
        </member>
        <member name="M:MWComLibCS.ExternalControl.NiDAQmxControl.GetPrductNumber(System.String)">
            <summary>装置の型コード取得</summary>
            <param name="deviceName">対象デバイス名</param>
            <returns></returns>
        </member>
        <member name="M:MWComLibCS.ExternalControl.NiDAQmxControl.GetSerialNumber(NationalInstruments.DAQmx.Device)">
            <summary>装置のシリアル番号取得</summary>
            <param name="device">対象デバイスのインスタンス</param>
            <returns></returns>
        </member>
        <member name="M:MWComLibCS.ExternalControl.NiDAQmxControl.GetSerialNumber(System.String)">
            <summary>装置のシリアル番号取得</summary>
            <param name="deviceName">対象デバイス名</param>
            <returns></returns>
        </member>
        <member name="T:MWComLibCS.ExternalControl.NiDioControl">
            <summary>NI-DIO(Digital Input Output) struct</summary>
        </member>
        <member name="M:MWComLibCS.ExternalControl.NiDioControl.GetDIPorts(NationalInstruments.DAQmx.Device)">
            <summary>DigitalInputPort一覧取得</summary>
            <param name="device">対象デバイスのインスタンス</param>
            <returns></returns>
        </member>
        <member name="M:MWComLibCS.ExternalControl.NiDioControl.GetDIPorts(System.String)">
            <summary>DigitalInputPort一覧取得</summary>
            <param name="deviceName">対象デバイス名</param>
            <returns></returns>
        </member>
        <member name="M:MWComLibCS.ExternalControl.NiDioControl.GetDOPorts(NationalInstruments.DAQmx.Device)">
            <summary>DigitalOutputPort一覧取得</summary>
            <param name="device">対象デバイスのインスタンス</param>
            <returns></returns>
        </member>
        <member name="M:MWComLibCS.ExternalControl.NiDioControl.GetDOPorts(System.String)">
            <summary>DigitalOutputPort一覧取得</summary>
            <param name="deviceName">対象デバイス名</param>
            <returns></returns>
        </member>
        <member name="M:MWComLibCS.ExternalControl.NiDioControl.GetDILines(NationalInstruments.DAQmx.Device)">
            <summary>DigitalInputLine一覧取得</summary>
            <param name="device">対象デバイスのインスタンス</param>
            <returns></returns>
        </member>
        <member name="M:MWComLibCS.ExternalControl.NiDioControl.GetDILines(System.String)">
            <summary>DigitalInputLine一覧取得</summary>
            <param name="deviceName">対象デバイス名</param>
            <returns></returns>
        </member>
        <member name="M:MWComLibCS.ExternalControl.NiDioControl.GetDOLines(NationalInstruments.DAQmx.Device)">
            <summary>DigitalOutputLine一覧取得</summary>
            <param name="device">対象デバイスのインスタンス</param>
            <returns></returns>
        </member>
        <member name="M:MWComLibCS.ExternalControl.NiDioControl.GetDOLines(System.String)">
            <summary>DigitalOutputLine一覧取得</summary>
            <param name="deviceName">対象デバイス名</param>
            <returns></returns>
        </member>
        <member name="T:MWComLibCS.ExternalControl.VisaControl">
            <summary>VISA制御用インタフェース</summary>
        </member>
        <member name="M:MWComLibCS.ExternalControl.VisaControl.Dispose">
            <summary>Classリソース破棄</summary>
        </member>
        <member name="P:MWComLibCS.ExternalControl.VisaControl.VisaAddress">
            <summary>初期化時に設定された測定器のVISAアドレス取得</summary>
        </member>
        <member name="P:MWComLibCS.ExternalControl.VisaControl.IsOpen">
            <summary>接続状態確認(true:接続中/false:未接続)</summary>
        </member>
        <member name="P:MWComLibCS.ExternalControl.VisaControl.DefaultTimeout">
            <summary>クラスのデフォルトタイムアウト時間を取得・変更[mS]</summary>
        </member>
        <member name="P:MWComLibCS.ExternalControl.VisaControl.NewLine">
            <summary>改行コード</summary>
        </member>
        <member name="M:MWComLibCS.ExternalControl.VisaControl.ControlCheck">
            <summary>接続可否判定(通信中は切断するため注意)
            タイムアウト時間はClassのデフォルト設定を使用</summary>
        </member>
        <member name="M:MWComLibCS.ExternalControl.VisaControl.ControlCheck(System.UInt32)">
            <summary>接続可否判定(通信中は切断するため注意)</summary>
            <param name="OpenTimeout">判定時のタイムアウト時間指定[mS]</param>
        </member>
        <member name="M:MWComLibCS.ExternalControl.VisaControl.Open">
            <summary>接続処理実行 (タイムアウト時間はClassのデフォルト設定を使用)</summary>
        </member>
        <member name="M:MWComLibCS.ExternalControl.VisaControl.Open(System.UInt32)">
            <summary>接続処理実行</summary>
            <param name="OpenTimeout">接続処理のタイムアウト時間指定[mS]</param>
        </member>
        <member name="M:MWComLibCS.ExternalControl.VisaControl.Close">
            <summary>切断処理実行</summary>
        </member>
        <member name="M:MWComLibCS.ExternalControl.VisaControl.ControlLocal">
            <summary>コントロールを計測器に返す<br/>
            GPIB/USB/HiSLIPのみ対応</summary>
        </member>
        <member name="M:MWComLibCS.ExternalControl.VisaControl.ControlRemote">
            <summary>コントロールをリモートに変更する(計測器のLocalコントロールをロック)<br/>
            GPIB/USB/HiSLIPのみ対応</summary>
        </member>
        <member name="M:MWComLibCS.ExternalControl.VisaControl.ControlREN(System.Boolean)">
            <summary>コントロールをリモートまたはローカルに切替(GPIB/USB/HiSLIPのみ対応)</summary>
            <param name="remote">true:remote / false:local</param>
        </member>
        <member name="M:MWComLibCS.ExternalControl.VisaControl.SetTimeout">
            <summary>タイムアウト時間をClassのデフォルトに設定</summary>
        </member>
        <member name="M:MWComLibCS.ExternalControl.VisaControl.SetTimeout(System.UInt32)">
            <summary>タイムアウト時間の変更</summary>
            <param name="Time">タイムアウト時間[mS]</param>
        </member>
        <member name="M:MWComLibCS.ExternalControl.VisaControl.GetTimeout">
            <summary>設定されているタイムアウト時間[mS]取得</summary>
        </member>
        <member name="M:MWComLibCS.ExternalControl.VisaControl.WriteAscii(System.String)">
            <summary>ASCII文字列送信</summary>
            <param name="Str">送信文字列</param>
        </member>
        <member name="M:MWComLibCS.ExternalControl.VisaControl.WriteAsciiCmdLine(System.String)">
            <summary>コマンド送信(改行コード自動追加)</summary>
            <param name="CMD">ASCIIコマンド</param>
        </member>
        <member name="M:MWComLibCS.ExternalControl.VisaControl.WriteByteIEEEblock(System.Byte[],System.Boolean)">
            <summary>ByteデータをIEEEblokFormatに変換(ヘッダ情報生成・付加)して送信</summary>
            <param name="DAT">送信Byteデータ(自動ヘッダ情報生成および付加)</param>
            <param name="FixedMode">true:確定長フォーマットで送信 / false:不確定長フォーマットで送信</param>
        </member>
        <member name="M:MWComLibCS.ExternalControl.VisaControl.WriteByteIEEEblock(System.String,System.Byte[],System.Boolean)">
            <summary>ヘッダ文字列送信に合わせてByteデータをIEEEblokFormatに変換(ヘッダ情報生成・付加)してデータ送信</summary>
            <param name="Header">ヘッダ文字列(コマンド等)を指定(DATデータ前に追加)</param>
            <param name="DAT">送信Byteデータ(自動ヘッダ情報生成および付加)</param>
            <param name="FixedMode">true:確定長フォーマットで送信 / false:不確定長フォーマットで送信</param>
        </member>
        <member name="M:MWComLibCS.ExternalControl.VisaControl.WriteBinary(System.Byte[])">
            <summary>Binaryデータ送信</summary>
            <param name="DAT">送信Byteデータ</param>
        </member>
        <member name="M:MWComLibCS.ExternalControl.VisaControl.ReadBinary">
            <summary>バイナリデータ受信</summary>
        </member>
        <member name="M:MWComLibCS.ExternalControl.VisaControl.ReadAscii">
            <summary>ASCIIデータ受信</summary>
        </member>
        <member name="M:MWComLibCS.ExternalControl.VisaControl.ReadAsciiBlock">
            <summary>ASCIIデータ受信後、最終改行コードのみ削除</summary>
        </member>
        <member name="M:MWComLibCS.ExternalControl.VisaControl.ReadBinaryIEEEblock">
            <summary>Binaryデータ受信後、IEEEblockフォーマットに合わせてデータのみ取得</summary>
        </member>
        <member name="T:MWComLibCS.ExternalControl.VisaControlIVI">
            <summary>IVI-VISA用制御クラス</summary>
        </member>
        <member name="F:MWComLibCS.ExternalControl.VisaControlIVI.defRm">
            <summary>ResourceManager(viOpenDefaultRMにて生成)</summary>
        </member>
        <member name="F:MWComLibCS.ExternalControl.VisaControlIVI.viAddress">
            <summary>VISA アドレス</summary>
        </member>
        <member name="F:MWComLibCS.ExternalControl.VisaControlIVI.instrID">
            <summary>測定器ハンドル</summary>
        </member>
        <member name="F:MWComLibCS.ExternalControl.VisaControlIVI.defTimeout">
            <summary>標準Timeout時間[mS]</summary>
        </member>
        <member name="F:MWComLibCS.ExternalControl.VisaControlIVI.ioAct">
            <summary>通信状態監視</summary>
        </member>
        <member name="F:MWComLibCS.ExternalControl.VisaControlIVI.getByteLen">
            <summary>1ショット受信Byte数(PC側のメモリ容量によって要調整)</summary>
        </member>
        <member name="F:MWComLibCS.ExternalControl.VisaControlIVI.logPath">
            <summary>コマンドログ保存先</summary>
        </member>
        <member name="F:MWComLibCS.ExternalControl.VisaControlIVI.autoCon">
            <summary>接続状態自動処理</summary>
        </member>
        <member name="M:MWComLibCS.ExternalControl.VisaControlIVI.#ctor(Ivi.Visa.Interop.ResourceManager,System.String)">
            <summary>コンストラクタ(自動接続処理有り/標準タイムアウト2[Sec]/受信バッファ1024[Byte]/改行コード"\n")</summary>
            <param name="ResManager">ResourceManagerを指定</param>
            <param name="VisaAddress">VISAアドレスを指定</param>
        </member>
        <member name="M:MWComLibCS.ExternalControl.VisaControlIVI.#ctor(Ivi.Visa.Interop.ResourceManager,System.String,System.Boolean)">
            <summary>コンストラクタ(標準タイムアウト2[Sec]/受信バッファ1024[Byte]/改行コード"\n")</summary>
            <param name="ResManager">ResourceManagerを指定</param>
            <param name="VisaAddress">VISAアドレスを指定</param>
            <param name="AutoConnect">接続状態を自動で制御する(trueの場合は自動で接続)</param>
        </member>
        <member name="M:MWComLibCS.ExternalControl.VisaControlIVI.#ctor(Ivi.Visa.Interop.ResourceManager,System.String,System.Boolean,System.UInt32,System.UInt32,System.String)">
            <summary>コンストラクタ</summary>
            <param name="ResManager">ResourceManagerを指定</param>
            <param name="VisaAddress">VISAアドレスを指定</param>
            <param name="AutoConnect">接続状態を自動で制御する(trueの場合は自動で接続)</param>
            <param name="DefaultBfByte">受信時のバッファサイズ指定(最大int.MaxValue=2,147,483,647)</param>
            <param name="DefaultTimeOut">標準タイムアウト時間指定[mS](最大int.MaxValue=2,147,483,647)</param>
            <param name="NewLineCode">改行コード</param>
        </member>
        <member name="M:MWComLibCS.ExternalControl.VisaControlIVI.Finalize">
            <summary>
            デストラクタ(終了関数)
            コントロールの通信状態がtrueの場合に切断処理を実行
            </summary>
        </member>
        <member name="M:MWComLibCS.ExternalControl.VisaControlIVI.Dispose">
            <summary>Classリソース破棄</summary>
        </member>
        <member name="P:MWComLibCS.ExternalControl.VisaControlIVI.ResourceManager">
            <summary>初期化時に設定されたResourceManager取得</summary>
        </member>
        <member name="P:MWComLibCS.ExternalControl.VisaControlIVI.VisaAddress">
            <summary>初期化時に設定された測定器のVISAアドレス取得</summary>
        </member>
        <member name="P:MWComLibCS.ExternalControl.VisaControlIVI.IsOpen">
            <summary>接続処理状態の取得(接続処理済みか判断用)</summary>
        </member>
        <member name="P:MWComLibCS.ExternalControl.VisaControlIVI.DefaultTimeout">
            <summary>クラスのデフォルトタイムアウト時間を取得・変更[mS](最大int.MaxValue=2,147,483,647)</summary>
        </member>
        <member name="M:MWComLibCS.ExternalControl.VisaControlIVI.ControlCheck">
            <summary>接続可否判定(通信中は切断するため注意)
            タイムアウト時間は0(最短)で固定</summary>
        </member>
        <member name="M:MWComLibCS.ExternalControl.VisaControlIVI.ControlCheck(System.UInt32)">
            <summary>接続可否判定(通信中は切断するため注意)</summary>
            <param name="OpenTimeout">判定時のタイムアウト時間指定[mS](最大int.MaxValue=2,147,483,647)</param>
        </member>
        <member name="M:MWComLibCS.ExternalControl.VisaControlIVI.Open(System.UInt32)">
            <summary>接続処理実行</summary>
            <param name="OpenTimeout">接続処理のタイムアウト時間指定[mS](最大int.MaxValue=2,147,483,647)</param>
        </member>
        <member name="M:MWComLibCS.ExternalControl.VisaControlIVI.Close">
            <summary>切断処理実行</summary>
        </member>
        <member name="M:MWComLibCS.ExternalControl.VisaControlIVI.ControlREN(System.Boolean)">
            <summary>コントロールをリモートまたはローカルに切替(GPIB/USB/HiSLIPのみ対応)</summary>
            <param name="remote">true:remote / false:local</param>
        </member>
        <member name="M:MWComLibCS.ExternalControl.VisaControlIVI.SetTimeout(System.UInt32)">
            <summary>タイムアウト時間の変更</summary>
            <param name="Time">タイムアウト時間[mS](最大int.MaxValue=2,147,483,647)</param>
        </member>
        <member name="M:MWComLibCS.ExternalControl.VisaControlIVI.GetTimeout">
            <summary>設定されているタイムアウト時間[mS]取得</summary>
        </member>
        <member name="M:MWComLibCS.ExternalControl.VisaControlIVI.WriteAscii(System.String)">
            <summary>ASCII文字列送信</summary>
            <param name="Str">送信文字列</param>
        </member>
        <member name="M:MWComLibCS.ExternalControl.VisaControlIVI.WriteByteIEEEblock(System.String,System.Byte[],System.Boolean)">
            <summary>ヘッダ文字列送信に合わせてByteデータをIEEEblokFormatに変換(ヘッダ情報生成・付加)してデータ送信</summary>
            <param name="Header">ヘッダ文字列(コマンド等)を指定(DATデータ前に追加)</param>
            <param name="DAT">送信Byteデータ(自動ヘッダ情報生成および付加)</param>
            <param name="FixedMode">true:確定長フォーマットで送信 / false:不確定長フォーマットで送信</param>
        </member>
        <member name="M:MWComLibCS.ExternalControl.VisaControlIVI.WriteBinary(System.Byte[])">
            <summary>Binaryデータ送信</summary>
            <param name="DAT">送信Byteデータ</param>
        </member>
        <member name="M:MWComLibCS.ExternalControl.VisaControlIVI.ReadBinary">
            <summary>バイナリデータ受信</summary>
        </member>
        <member name="M:MWComLibCS.ExternalControl.VisaControlIVI.ReadAscii">
            <summary>ASCIIデータ受信</summary>
        </member>
        <member name="M:MWComLibCS.ExternalControl.VisaControlIVI.ReadBinaryIEEEblock">
            <summary>Binaryデータ受信後、IEEEblockフォーマットに合わせてデータのみ取得</summary>
        </member>
        <member name="M:MWComLibCS.ExternalControl.VisaControlIVI.NewResourceManager">
            <summary>ResourceManagerを新規で取得(基本的にプログラム内で1回のみ)</summary>
        </member>
        <member name="M:MWComLibCS.ExternalControl.VisaControlIVI.NewResourceManager(Ivi.Visa.Interop.ResourceManager@)">
            <summary>取得結果判定型ResourceManager新規取得(基本的にプログラム内で1回のみ)</summary>
            <param name="ResManager">成功した場合はリソースマネージャを、失敗した場合は"null"を格納</param>
        </member>
        <member name="M:MWComLibCS.ExternalControl.VisaControlIVI.CloseResourceManager(Ivi.Visa.Interop.ResourceManager)">
            <summary>ResourceManagerを開放</summary>
            <param name="ResManager">解放するResourceManagerを指定</param>
        </member>
        <member name="M:MWComLibCS.ExternalControl.VisaControlIVI.GetInstrumentsAddress">
            <summary>接続されている測定器VISAアドレス一覧を取得</summary>
        </member>
        <member name="M:MWComLibCS.ExternalControl.VisaControlIVI.GetInstrumentsAddress(System.String)">
            <summary>測定器VISAアドレス一覧を取得</summary>
            <param name="Expression">正規表現で測定器の絞込(例："?*"で全てのリソース、"(USB|GPIB)?*INSTR"でUSBとGPIBのみ)</param>
        </member>
        <member name="M:MWComLibCS.ExternalControl.VisaControlIVI.GetInstrumentsAddress(Ivi.Visa.Interop.ResourceManager)">
            <summary>接続されている測定器VISAアドレス一覧を取得</summary>
            <param name="ResManager">ResourceManagerを指定</param>
        </member>
        <member name="M:MWComLibCS.ExternalControl.VisaControlIVI.GetInstrumentsAddress(Ivi.Visa.Interop.ResourceManager,System.String)">
            <summary>測定器VISAアドレス一覧を取得</summary>
            <param name="ResManager">ResourceManagerを指定</param>
            <param name="Expression">正規表現で測定器の絞込(例："?*"で全てのリソース、"(USB|GPIB)?*INSTR"でUSBとGPIBのみ)</param>
        </member>
        <member name="T:MWComLibCS.ExternalControl.VisaControlIVI.VisaControlExceptionIVI">
            <summary>コマンドエラー発生時にOMCComLib.VisaComLib_5_9_Controlによってスローされる例外</summary>
        </member>
        <member name="M:MWComLibCS.ExternalControl.VisaControlIVI.VisaControlExceptionIVI.#ctor">
            <summary>エラーメッセージ"NI-VISA Control Exception"でクラスのインスタンスを初期化</summary>
        </member>
        <member name="M:MWComLibCS.ExternalControl.VisaControlIVI.VisaControlExceptionIVI.#ctor(System.String)">
            <summary>指定したエラー メッセージを使用してクラスのインスタンスを初期化</summary>
        </member>
        <member name="M:MWComLibCS.ExternalControl.VisaControlIVI.VisaControlExceptionIVI.#ctor(System.String,System.Exception)">
            <summary>指定したエラー メッセージと、この例外の原因である内部例外への参照を使用してクラスのインスタンスを初期化</summary>
        </member>
        <member name="M:MWComLibCS.ExternalControl.VisaControlIVI.ioActivateCheck(System.String)">
            <summary>IO Activation Check
            AutoConnectの場合は強制接続処理</summary>
            <param name="FuncName">例外出力用コマンドstring</param>
        </member>
        <member name="M:MWComLibCS.ExternalControl.VisaControlIVI.StrComp(System.String,System.String)">
            <summary>文字列比較(大文字・小文字・半角・全角・ひらがな・カタカナを区別しない)</summary>
            <param name="strA">文字列A</param>
            <param name="strB">文字列B</param>
            <returns>真偽</returns>
        </member>
        <member name="T:MWComLibCS.ExternalControl.VisaControlNI">
            <summary>NI-VISA用制御クラス</summary>
        </member>
        <member name="F:MWComLibCS.ExternalControl.VisaControlNI.defRm">
            <summary>ResourceManager(viOpenDefaultRMにて生成)</summary>
        </member>
        <member name="F:MWComLibCS.ExternalControl.VisaControlNI.viAddress">
            <summary>VISA アドレス</summary>
        </member>
        <member name="F:MWComLibCS.ExternalControl.VisaControlNI.instrID">
            <summary>測定器ハンドル</summary>
        </member>
        <member name="F:MWComLibCS.ExternalControl.VisaControlNI.defTimeout">
            <summary>標準Timeout時間[mS]</summary>
        </member>
        <member name="F:MWComLibCS.ExternalControl.VisaControlNI.viResult">
            <summary>通信結果バッファ</summary>
        </member>
        <member name="F:MWComLibCS.ExternalControl.VisaControlNI.ioAct">
            <summary>通信状態監視</summary>
        </member>
        <member name="F:MWComLibCS.ExternalControl.VisaControlNI.getByteLen">
            <summary>1ショット受信Byte数(PC側のメモリ容量によって要調整)</summary>
        </member>
        <member name="F:MWComLibCS.ExternalControl.VisaControlNI.logPath">
            <summary>コマンドログ保存先</summary>
        </member>
        <member name="F:MWComLibCS.ExternalControl.VisaControlNI.autoCon">
            <summary>接続状態自動処理</summary>
        </member>
        <member name="M:MWComLibCS.ExternalControl.VisaControlNI.#ctor(System.Int32,System.String)">
            <summary>コンストラクタ(自動接続処理有り/標準タイムアウト2[Sec]/受信バッファ1024[Byte]/改行コード"\n"/ログ保存は行わない)</summary>
            <param name="ResourceManager">ResourceManagerを指定</param>
            <param name="VisaAddress">VISAアドレスを指定</param>
        </member>
        <member name="M:MWComLibCS.ExternalControl.VisaControlNI.#ctor(System.Int32,System.String,System.Boolean)">
            <summary>コンストラクタ(標準タイムアウト2[Sec]/受信バッファ1024[Byte]/改行コード"\n"/ログ保存は行わない)</summary>
            <param name="ResourceManager">ResourceManagerを指定</param>
            <param name="VisaAddress">VISAアドレスを指定</param>
            <param name="AutoConnect">接続状態を自動で制御する(trueの場合は自動で接続)</param>
        </member>
        <member name="M:MWComLibCS.ExternalControl.VisaControlNI.#ctor(System.Int32,System.String,System.Boolean,System.String)">
            <summary>コンストラクタ(標準タイムアウト2[Sec]/受信バッファ1024[Byte]/改行コード"\n")</summary>
            <param name="ResourceManager">ResourceManagerを指定</param>
            <param name="VisaAddress">VISAアドレスを指定</param>
            <param name="AutoConnect">接続状態を自動で制御する(trueの場合は自動で接続)</param>
            <param name="LogFilePath">ログファイルを保存する場合のファイルパス(空白でログ保存は行わない)</param>
        </member>
        <member name="M:MWComLibCS.ExternalControl.VisaControlNI.#ctor(System.Int32,System.String,System.Boolean,System.UInt32,System.UInt32,System.String,System.String)">
            <summary>コンストラクタ</summary>
            <param name="ResourceManager">ResourceManagerを指定</param>
            <param name="VisaAddress">VISAアドレスを指定</param>
            <param name="AutoConnect">接続状態を自動で制御する(trueの場合は自動で接続)</param>
            <param name="DefaultBfByte">受信時のバッファサイズ指定(最大int.MaxValue=2,147,483,647)</param>
            <param name="DefaultTimeOut">標準タイムアウト時間指定[mS](最大int.MaxValue=2,147,483,647)</param>
            <param name="NewLineCode">改行コード</param>
            <param name="LogFilePath">ログファイルを保存する場合のファイルパス(空白でログ保存は行わない)</param>
        </member>
        <member name="M:MWComLibCS.ExternalControl.VisaControlNI.Finalize">
            <summary>
            デストラクタ(終了関数)
            コントロールの通信状態がtrueの場合に切断処理を実行
            </summary>
        </member>
        <member name="M:MWComLibCS.ExternalControl.VisaControlNI.Dispose">
            <summary>Classリソース破棄</summary>
        </member>
        <member name="P:MWComLibCS.ExternalControl.VisaControlNI.ResourceManager">
            <summary>初期化時に設定されたResourceManager取得</summary>
        </member>
        <member name="P:MWComLibCS.ExternalControl.VisaControlNI.VisaAddress">
            <summary>初期化時に設定された測定器のVISAアドレス取得</summary>
        </member>
        <member name="P:MWComLibCS.ExternalControl.VisaControlNI.IsOpen">
            <summary>接続処理状態の取得(接続処理済みか判断用)</summary>
        </member>
        <member name="P:MWComLibCS.ExternalControl.VisaControlNI.DefaultTimeout">
            <summary>クラスのデフォルトタイムアウト時間を取得・変更[mS](最大int.MaxValue=2,147,483,647)</summary>
        </member>
        <member name="M:MWComLibCS.ExternalControl.VisaControlNI.ControlCheck(System.UInt32)">
            <summary>接続可否(Open可否)判定(通信中は切断するため注意)</summary>
            <param name="OpenTimeout">判定時のタイムアウト時間指定[mS](最大int.MaxValue=2,147,483,647)</param>
        </member>
        <member name="M:MWComLibCS.ExternalControl.VisaControlNI.Open(System.UInt32)">
            <summary>接続処理実行</summary>
            <param name="OpenTimeout">接続処理のタイムアウト時間指定[mS](最大int.MaxValue=2,147,483,647)</param>
        </member>
        <member name="M:MWComLibCS.ExternalControl.VisaControlNI.Close">
            <summary>切断処理実行</summary>
        </member>
        <member name="M:MWComLibCS.ExternalControl.VisaControlNI.ControlREN(System.Boolean)">
            <summary>コントロールをリモートまたはローカルに切替(GPIB/USB/HiSLIPのみ対応)</summary>
            <param name="remote">true:remote / false:local</param>
        </member>
        <member name="M:MWComLibCS.ExternalControl.VisaControlNI.SetTimeout(System.UInt32)">
            <summary>タイムアウト時間の変更</summary>
            <param name="Time">タイムアウト時間[mS](最大int.MaxValue=2,147,483,647)</param>
        </member>
        <member name="M:MWComLibCS.ExternalControl.VisaControlNI.GetTimeout">
            <summary>設定されているタイムアウト時間[mS]取得</summary>
        </member>
        <member name="M:MWComLibCS.ExternalControl.VisaControlNI.WriteBinary(System.Byte[])">
            <summary>Binaryデータ送信</summary>
            <param name="DAT">送信Byteデータ</param>
        </member>
        <member name="M:MWComLibCS.ExternalControl.VisaControlNI.ReadBinary">
            <summary>バイナリデータ受信</summary>
        </member>
        <member name="M:MWComLibCS.ExternalControl.VisaControlNI.WriteHSCMD(System.String)">
            <summary>文字数等を制限し、最小処理でコマンド送信
            ログや確認処理等も一切行わないため通常は使用しないこと</summary>
            <param name="CMD">コマンド(終端文字必須)</param>
            <returns>実行結果</returns>
        </member>
        <member name="M:MWComLibCS.ExternalControl.VisaControlNI.WriteHSDAT(System.Byte[],System.Int32@)">
            <summary>最小処理でDAT送信ログや確認処理等も一切行わないため通常は使用しないこと</summary>
            <param name="DAT">バイナリ(終端文字必須)</param>
            <param name="Count">送信バイト数</param>
            <returns></returns>
        </member>
        <member name="M:MWComLibCS.ExternalControl.VisaControlNI.ReadHSByte">
            <summary>最小処理でバイナリデータ受信ログや確認処理等も一切行わないため通常は使用しないこと</summary>
        </member>
        <member name="M:MWComLibCS.ExternalControl.VisaControlNI.ReadHSAscii">
            <summary>最小処理でASCIIデータ受信ログや確認処理等も一切行わないため通常は使用しないこと</summary>
        </member>
        <member name="M:MWComLibCS.ExternalControl.VisaControlNI.NewResourceManager">
            <summary>ResourceManagerを新規で取得(基本的にプログラム内で1回のみ)</summary>
        </member>
        <member name="M:MWComLibCS.ExternalControl.VisaControlNI.NewResourceManager(System.Int32@)">
            <summary>取得結果判定型ResourceManager新規取得(基本的にプログラム内で1回のみ)</summary>
            <param name="ResourceManager">成功した場合はリソースマネージャを、失敗した場合は"-1"を格納</param>
        </member>
        <member name="M:MWComLibCS.ExternalControl.VisaControlNI.GetInstrumentsAddress">
            <summary>接続されている測定器VISAアドレス一覧を取得</summary>
        </member>
        <member name="M:MWComLibCS.ExternalControl.VisaControlNI.GetInstrumentsAddress(System.String)">
            <summary>測定器VISAアドレス一覧を取得</summary>
            <param name="Expression">正規表現で測定器の絞込(例："?*"で全てのリソース、"(USB|GPIB)?*INSTR"でUSBとGPIBのみ)</param>
        </member>
        <member name="M:MWComLibCS.ExternalControl.VisaControlNI.GetInstrumentsAddress(System.Int32)">
            <summary>接続されている測定器VISAアドレス一覧を取得</summary>
            <param name="ResourceManager">ResourceManagerを指定</param>
        </member>
        <member name="M:MWComLibCS.ExternalControl.VisaControlNI.GetInstrumentsAddress(System.Int32,System.String)">
            <summary>測定器VISAアドレス一覧を取得</summary>
            <param name="ResourceManager">ResourceManagerを指定</param>
            <param name="Expression">正規表現で測定器の絞込(例："?*"で全てのリソース、"(USB|GPIB)?*INSTR"でUSBとGPIBのみ)</param>
        </member>
        <member name="M:MWComLibCS.ExternalControl.VisaControlNI.GetErrMsg(System.Int32)">
            <summary>visa32エラーコード変換</summary>
            <param name="Code">コード番号</param>
            <returns>内容(string型)</returns>
        </member>
        <member name="T:MWComLibCS.ExternalControl.VisaControlNI.VisaControlExceptionNI">
            <summary>visa32コマンドエラー発生時にOMCComLib.NiVisaControlによってスローされる例外</summary>
        </member>
        <member name="M:MWComLibCS.ExternalControl.VisaControlNI.VisaControlExceptionNI.#ctor">
            <summary>エラーメッセージ"NI-VISA Control Exception"でクラスのインスタンスを初期化</summary>
        </member>
        <member name="M:MWComLibCS.ExternalControl.VisaControlNI.VisaControlExceptionNI.#ctor(System.String)">
            <summary>指定したエラー メッセージを使用してクラスのインスタンスを初期化</summary>
        </member>
        <member name="M:MWComLibCS.ExternalControl.VisaControlNI.VisaControlExceptionNI.#ctor(System.String,System.Exception)">
            <summary>指定したエラー メッセージと、この例外の原因である内部例外への参照を使用してクラスのインスタンスを初期化</summary>
        </member>
        <member name="M:MWComLibCS.ExternalControl.VisaControlNI.ioActivateCheck(System.String)">
            <summary>IO Activation Check
            </summary>AutoConnectの場合は強制接続処理
            <param name="FuncName">ログ出力用コマンドstring</param>
        </member>
        <member name="M:MWComLibCS.ExternalControl.VisaControlNI.saveLog(System.String)">
            <summary>ログ出力</summary>
            <param name="msg">ログ内容</param>
        </member>
        <member name="M:MWComLibCS.ExternalControl.VisaControlNI.StrComp(System.String,System.String)">
            <summary>文字列比較(大文字・小文字・半角・全角・ひらがな・カタカナを区別しない)</summary>
            <param name="strA">文字列A</param>
            <param name="strB">文字列B</param>
            <returns>真偽</returns>
        </member>
        <member name="M:MWComLibCS.ExternalControl.Instrument.StatusClear">
            <summary>
            ステータスクリア(*CLS)<br/>
            ステータスバイト、イベントステータスレジスタ、エラーキューを含むすべてのイベントレジスタをクリア<br/>
            *OPC/*OPC?による完了待ち動作を取消し
            </summary>
        </member>
        <member name="M:MWComLibCS.ExternalControl.Instrument.SetEventStatusEnable(MWComLibCS.ExternalControl.IEEE488_Register)">
            <summary>イベントステータスのイネーブルレジスタ設定(*ESE ESE.NR)</summary>
            <param name="ESE">設定値</param>
        </member>
        <member name="M:MWComLibCS.ExternalControl.Instrument.GetEventStatusEnable">
            <summary>イベントステータスのイネーブルレジスタ設定状態取得(*ESE?)</summary>
            <returns>設定値</returns>
        </member>
        <member name="M:MWComLibCS.ExternalControl.Instrument.GetEventStatusRegister">
            <summary>イベントレジスタの取得(*ESR?)</summary>
            <returns>レジスタ値</returns>
        </member>
        <member name="M:MWComLibCS.ExternalControl.Instrument.GetInstrumentIdentification">
            <summary>識別問合せ(*IDN?)</summary>
            <returns>装置の識別情報</returns>
        </member>
        <member name="M:MWComLibCS.ExternalControl.Instrument.InstrumentLearn">
            <summary>装置を現在の状態に設定するのに必要な情報の取得(*LRN?)</summary>
            <returns>受信データ(装置に応じて要変換)</returns>
        </member>
        <member name="M:MWComLibCS.ExternalControl.Instrument.SetOperationComplete">
            <summary>現在の動作完了時にイベントレジスタの動作完了ビットに1を設定(*OPC)</summary>
        </member>
        <member name="M:MWComLibCS.ExternalControl.Instrument.GetOperationComplete">
            <summary>動作完了後に出力バッファへ1を返す(*OPC?)</summary>
            <returns></returns>
        </member>
        <member name="M:MWComLibCS.ExternalControl.Instrument.GetOption">
            <summary>装備オプションの取得(*OPT?)</summary>
            <returns>オプション文字列(装置に応じて要変換)</returns>
        </member>
        <member name="M:MWComLibCS.ExternalControl.Instrument.SetPowerOnStatusClear(System.Boolean)">
            <summary>電源導入ステータスの設定(*PSC State)</summary>
            <param name="State">設定ステータス(true:1/false:0)</param>
        </member>
        <member name="M:MWComLibCS.ExternalControl.Instrument.GetPowerOnStatusClear">
            <summary>電源導入ステータスの設定取得(*PSC?)</summary>
            <returns>設定ステータス(true:1/false:0)</returns>
        </member>
        <member name="M:MWComLibCS.ExternalControl.Instrument.Recall(System.String)">
            <summary>装置の状態をステートファイルからリコールする(*RCL arg)</summary>
            <param name="arg">ステートファイル指定(装置に応じて要設定)</param>
        </member>
        <member name="M:MWComLibCS.ExternalControl.Instrument.Reset">
            <summary>装置を工場出荷状態時の規定値に初期化(*RST)</summary>
            <exception cref="T:System.Exception"></exception>
        </member>
        <member name="M:MWComLibCS.ExternalControl.Instrument.Save(System.String)">
            <summary>装置の状態をステートファイルに保存する(*SAV arg)</summary>
            <param name="arg">ステートファイル指定(装置に応じて要設定)</param>
        </member>
        <member name="M:MWComLibCS.ExternalControl.Instrument.SetServiceRequestEnable(MWComLibCS.ExternalControl.IEEE488_Register)">
            <summary>ステータスバイトレジスタのイネーブルレジスタ設定(*SRE SRE.NR)</summary>
            <param name="SRE">設定値</param>
        </member>
        <member name="M:MWComLibCS.ExternalControl.Instrument.GetServiceRequestEnable">
            <summary>ステータスバイトレジスタのイネーブルレジスタ設定状態取得(*ERE?)</summary>
            <returns>設定値</returns>
        </member>
        <member name="M:MWComLibCS.ExternalControl.Instrument.GetStatusByte">
            <summary>ステータスバイトレジスタの取得(*STB?)</summary>
            <returns>レジスタ値</returns>
        </member>
        <member name="M:MWComLibCS.ExternalControl.Instrument.Trigger">
            <summary>トリガ設定(*TRG)<br/>
            (装置に応じて動作は異なる)</summary>
        </member>
        <member name="M:MWComLibCS.ExternalControl.Instrument.GetTest">
            <summary>装置のセルフテスト(*TST?)</summary>
            <returns>テスト結果(装置に応じて要変換)</returns>
        </member>
        <member name="M:MWComLibCS.ExternalControl.Instrument.Wait">
            <summary>保留中の全処理が完了するまで待つ(*WAI)</summary>
        </member>
        <member name="T:MWComLibCS.ExternalControl.IEEE488">
            <summary>IEEE488.2対応装置基底クラス</summary>
        </member>
        <member name="P:MWComLibCS.ExternalControl.IEEE488.IEEE488_VisaControl">
            <summary>VISA簡易コントローラ</summary>
        </member>
        <member name="M:MWComLibCS.ExternalControl.IEEE488.#ctor(MWComLibCS.ExternalControl.VisaControl)">
            <summary>コンストラクタ</summary>
            <param name="VISA_Instrument">制御VisaControlクラス</param>
        </member>
        <member name="M:MWComLibCS.ExternalControl.IEEE488.Finalize">
            <summary>デストラクタ</summary>
        </member>
        <member name="M:MWComLibCS.ExternalControl.IEEE488.Dispose">
            <summary>初期化で使用したコントローラクラスのDispose</summary>
        </member>
        <member name="M:MWComLibCS.ExternalControl.IEEE488.StatusClear">
            <summary>
            ステータスクリア(*CLS)<br/>
            ステータスバイト、イベントステータスレジスタ、エラーキューを含むすべてのイベントレジスタをクリア<br/>
            *OPC/*OPC?による完了待ち動作を取消し
            </summary>
        </member>
        <member name="M:MWComLibCS.ExternalControl.IEEE488.SetEventStatusEnable(MWComLibCS.ExternalControl.IEEE488_Register)">
            <summary>イベントステータスのイネーブルレジスタ設定(*ESE ESE.NR)</summary>
            <param name="ESE">設定値</param>
        </member>
        <member name="M:MWComLibCS.ExternalControl.IEEE488.GetEventStatusEnable">
            <summary>イベントステータスのイネーブルレジスタ設定状態取得(*ESE?)</summary>
            <returns>設定値</returns>
        </member>
        <member name="M:MWComLibCS.ExternalControl.IEEE488.GetEventStatusRegister">
            <summary>イベントレジスタの取得(*ESR?)</summary>
            <returns>レジスタ値</returns>
        </member>
        <member name="M:MWComLibCS.ExternalControl.IEEE488.GetInstrumentIdentification">
            <summary>識別問合せ(*IDN?)</summary>
            <returns>装置の識別情報</returns>
        </member>
        <member name="M:MWComLibCS.ExternalControl.IEEE488.GetInstrumentIdentificationAscii">
            <summary>識別問合せ(*IDN?)</summary>
            <returns>装置の識別情報</returns>
        </member>
        <member name="M:MWComLibCS.ExternalControl.IEEE488.InstrumentLearn">
            <summary>装置を現在の状態に設定するのに必要な情報の取得(*LRN?)</summary>
            <returns>受信データ(装置に応じて要変換)</returns>
        </member>
        <member name="M:MWComLibCS.ExternalControl.IEEE488.SetOperationComplete">
            <summary>現在の動作完了時にイベントレジスタの動作完了ビットに1を設定(*OPC)</summary>
        </member>
        <member name="M:MWComLibCS.ExternalControl.IEEE488.GetOperationComplete">
            <summary>動作完了後に出力バッファへ1を返す(*OPC?)</summary>
            <returns></returns>
        </member>
        <member name="M:MWComLibCS.ExternalControl.IEEE488.GetOption">
            <summary>装備オプションの取得(*OPT?)</summary>
            <returns>オプション文字列(装置に応じて要変換)</returns>
        </member>
        <member name="M:MWComLibCS.ExternalControl.IEEE488.SetPowerOnStatusClear(System.Boolean)">
            <summary>電源導入ステータスの設定(*PSC State)</summary>
            <param name="State">設定ステータス(true:1/false:0)</param>
        </member>
        <member name="M:MWComLibCS.ExternalControl.IEEE488.GetPowerOnStatusClear">
            <summary>電源導入ステータスの設定取得(*PSC?)</summary>
            <returns>設定ステータス(true:1/false:0)</returns>
        </member>
        <member name="M:MWComLibCS.ExternalControl.IEEE488.Recall(System.String)">
            <summary>装置の状態をステートファイルからリコールする(*RCL arg)</summary>
            <param name="arg">ステートファイル指定(装置に応じて要設定)</param>
        </member>
        <member name="M:MWComLibCS.ExternalControl.IEEE488.Reset">
            <summary>装置を工場出荷状態時の規定値に初期化(*RST)</summary>
            <exception cref="T:System.Exception"></exception>
        </member>
        <member name="M:MWComLibCS.ExternalControl.IEEE488.Save(System.String)">
            <summary>装置の状態をステートファイルに保存する(*SAV arg)</summary>
            <param name="arg">ステートファイル指定(装置に応じて要設定)</param>
        </member>
        <member name="M:MWComLibCS.ExternalControl.IEEE488.SetServiceRequestEnable(MWComLibCS.ExternalControl.IEEE488_Register)">
            <summary>ステータスバイトレジスタのイネーブルレジスタ設定(*SRE SRE.NR)</summary>
            <param name="SRE">設定値</param>
        </member>
        <member name="M:MWComLibCS.ExternalControl.IEEE488.GetServiceRequestEnable">
            <summary>ステータスバイトレジスタのイネーブルレジスタ設定状態取得(*SRE?)</summary>
            <returns>設定値</returns>
        </member>
        <member name="M:MWComLibCS.ExternalControl.IEEE488.GetStatusByte">
            <summary>ステータスバイトレジスタの取得(*STB?)</summary>
            <returns>レジスタ値</returns>
        </member>
        <member name="M:MWComLibCS.ExternalControl.IEEE488.Trigger">
            <summary>トリガ設定(*TRG)<br/>
            (装置に応じて動作は異なる)</summary>
        </member>
        <member name="M:MWComLibCS.ExternalControl.IEEE488.GetTest">
            <summary>装置のセルフテスト(*TST?)</summary>
            <returns>テスト結果(装置に応じて要変換)</returns>
        </member>
        <member name="M:MWComLibCS.ExternalControl.IEEE488.Wait">
            <summary>保留中の全処理が完了するまで待つ(*WAI)</summary>
        </member>
        <member name="M:MWComLibCS.ExternalControl.IEEE488.CLS">
            <summary>
            ステータスクリア(*CLS)<br/>
            ステータスバイト、イベントステータスレジスタ、エラーキューを含むすべてのイベントレジスタをクリア<br/>
            *OPC/*OPC?による完了待ち動作を取消し
            </summary>
        </member>
        <member name="M:MWComLibCS.ExternalControl.IEEE488.ESE(MWComLibCS.ExternalControl.IEEE488_Register)">
            <summary>イベントステータスのイネーブルレジスタ設定(*ESE ESE.NR)</summary>
            <param name="ESE">設定値</param>
        </member>
        <member name="M:MWComLibCS.ExternalControl.IEEE488.ESE">
            <summary>イベントステータスのイネーブルレジスタ設定状態取得(*ESE?)</summary>
            <returns>設定値</returns>
        </member>
        <member name="M:MWComLibCS.ExternalControl.IEEE488.ESR">
            <summary>イベントレジスタの取得(*ESR?)</summary>
            <returns>レジスタ値</returns>
        </member>
        <member name="M:MWComLibCS.ExternalControl.IEEE488.IDN">
            <summary>識別問合せ(*IDN?)</summary>
            <returns>装置の識別情報</returns>
        </member>
        <member name="M:MWComLibCS.ExternalControl.IEEE488.LRN">
            <summary>装置を現在の状態に設定するのに必要な情報の取得(*LRN?)</summary>
            <returns>受信データ(装置に応じて要変換)</returns>
        </member>
        <member name="M:MWComLibCS.ExternalControl.IEEE488.OPC">
            <summary>現在の動作完了時にイベントレジスタの動作完了ビットに1を設定(*OPC)</summary>
        </member>
        <member name="M:MWComLibCS.ExternalControl.IEEE488.OPCQ">
            <summary>動作完了後に出力バッファへ1を返す(*OPC?)</summary>
            <returns></returns>
        </member>
        <member name="M:MWComLibCS.ExternalControl.IEEE488.OPT">
            <summary>装備オプションの取得(*OPT?)</summary>
            <returns>オプション文字列(装置に応じて要変換)</returns>
        </member>
        <member name="M:MWComLibCS.ExternalControl.IEEE488.PSC(System.Boolean)">
            <summary>電源導入ステータスの設定(*PSC State)</summary>
            <param name="State">設定ステータス(true:1/false:0)</param>
        </member>
        <member name="M:MWComLibCS.ExternalControl.IEEE488.PSC">
            <summary>電源導入ステータスの設定取得(*PSC?)</summary>
            <returns>設定ステータス(true:1/false:0)</returns>
        </member>
        <member name="M:MWComLibCS.ExternalControl.IEEE488.RCL(System.String)">
            <summary>装置の状態をステートファイルからリコールする(*RCL arg)</summary>
            <param name="arg">ステートファイル指定(装置に応じて要設定)</param>
        </member>
        <member name="M:MWComLibCS.ExternalControl.IEEE488.RST">
            <summary>装置を工場出荷状態時の規定値に初期化(*RST)</summary>
            <exception cref="T:System.Exception"></exception>
        </member>
        <member name="M:MWComLibCS.ExternalControl.IEEE488.SAV(System.String)">
            <summary>装置の状態をステートファイルに保存する(*SAV arg)</summary>
            <param name="arg">ステートファイル指定(装置に応じて要設定)</param>
        </member>
        <member name="M:MWComLibCS.ExternalControl.IEEE488.SRE(MWComLibCS.ExternalControl.IEEE488_Register)">
            <summary>ステータスバイトレジスタのイネーブルレジスタ設定(*SRE SRE.NR)</summary>
            <param name="SRE">設定値</param>
        </member>
        <member name="M:MWComLibCS.ExternalControl.IEEE488.ERE">
            <summary>ステータスバイトレジスタのイネーブルレジスタ設定状態取得(*ERE?)</summary>
            <returns>設定値</returns>
        </member>
        <member name="M:MWComLibCS.ExternalControl.IEEE488.STB">
            <summary>ステータスバイトレジスタの取得(*STB?)</summary>
            <returns>レジスタ値</returns>
        </member>
        <member name="M:MWComLibCS.ExternalControl.IEEE488.TRG">
            <summary>トリガ設定(*TRG)<br/>
            (装置に応じて動作は異なる)</summary>
        </member>
        <member name="M:MWComLibCS.ExternalControl.IEEE488.TST">
            <summary>装置のセルフテスト(*TST?)</summary>
            <returns>テスト結果(装置に応じて要変換)</returns>
        </member>
        <member name="M:MWComLibCS.ExternalControl.IEEE488.WAI">
            <summary>保留中の全処理が完了するまで待つ(*WAI)</summary>
        </member>
        <member name="T:MWComLibCS.ExternalControl.IEEE488_IDN">
            <summary>IEEE488.2 IDN(識別情報)構造体</summary>
        </member>
        <member name="P:MWComLibCS.ExternalControl.IEEE488_IDN.Vender">
            <summary>メーカ名</summary>
        </member>
        <member name="P:MWComLibCS.ExternalControl.IEEE488_IDN.ModelNumber">
            <summary>モデル番号</summary>
        </member>
        <member name="P:MWComLibCS.ExternalControl.IEEE488_IDN.SerialNumber">
            <summary>シリアル番号</summary>
        </member>
        <member name="P:MWComLibCS.ExternalControl.IEEE488_IDN.RevisionCode">
            <summary>リビジョンコード</summary>
        </member>
        <member name="P:MWComLibCS.ExternalControl.IEEE488_IDN.IDN">
            <summary>IDNコード</summary>
        </member>
        <member name="M:MWComLibCS.ExternalControl.IEEE488_IDN.#ctor(System.String)">
            <summary>コンストラクタ</summary>
            <param name="strIDN">IDNコード</param>
        </member>
        <member name="M:MWComLibCS.ExternalControl.IEEE488_IDN.#ctor(System.String,System.String,System.String,System.String)">
            <summary>コンストラクタ</summary>
            <param name="vender">メーカ名</param>
            <param name="model">モデル番号</param>
            <param name="sn">シリアル番号</param>
            <param name="rev">リビジョンコード</param>
        </member>
        <member name="T:MWComLibCS.ExternalControl.IEEE488_Register">
            <summary>2Byteレジスタクラス</summary>
        </member>
        <member name="P:MWComLibCS.ExternalControl.IEEE488_Register.NR1">
            <summary>下位byte</summary>
        </member>
        <member name="P:MWComLibCS.ExternalControl.IEEE488_Register.NR2">
            <summary>上位byte</summary>
        </member>
        <member name="P:MWComLibCS.ExternalControl.IEEE488_Register.NR">
            <summary>2byte値</summary>
        </member>
        <member name="M:MWComLibCS.ExternalControl.IEEE488_Register.#ctor(System.UInt16)">
            <summary>コンストラクタ</summary>
            <param name="nr">NR値</param>
        </member>
        <member name="M:MWComLibCS.ExternalControl.IEEE488_Register.#ctor(System.Byte,System.Byte)">
            <summary>コンストラクタ</summary>
            <param name="nr2">上位byte</param>
            <param name="nr1">下位byte</param>
        </member>
        <member name="P:MWComLibCS.ExternalControl.IEEE488_Register.Register">
            <summary>レジストリbool配列取得</summary>
        </member>
        <member name="T:MWComLibCS.ExternalControl.Bits">
            <summary>Binary用bit操作クラス</summary>
        </member>
        <member name="M:MWComLibCS.ExternalControl.Bits.ConvertToByte(System.Collections.BitArray)">
            <summary>bit配列→byte変換</summary>
            <param name="bits">BitArray(8)</param>
            <returns></returns>
        </member>
        <member name="M:MWComLibCS.ExternalControl.Bits.BitChange(System.Byte,System.Int32,System.Boolean)">
            <summary>指定1ビットを書換え</summary>
            <param name="target">対象ビット配列</param>
            <param name="index">書換場所</param>
            <param name="value">書換bit値</param>
            <returns>書換後byte</returns>
        </member>
        <member name="M:MWComLibCS.ExternalControl.Bits.BitChange(System.Collections.BitArray,System.Int32,System.Boolean)">
            <summary>指定1ビットを書換え</summary>
            <param name="bits">対象ビット配列</param>
            <param name="index">書換場所</param>
            <param name="value">書換bit値</param>
            <returns>書換後byte</returns>
        </member>
        <member name="M:MWComLibCS.ExternalControl.Bits.GetBit(System.Byte,System.Int32)">
            <summary>指定1ビットを取得</summary>
            <param name="target">対象byte</param>
            <param name="index">取得場所</param>
            <returns></returns>
        </member>
        <member name="M:MWComLibCS.ExternalControl.Bits.ConvertToBitArray(System.Byte)">
            <summary>byteからBitArrayに変換</summary>
            <param name="vb">変換元byte</param>
            <returns></returns>
        </member>
    </members>
</doc>
